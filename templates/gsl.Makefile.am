.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin Makefile.am.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

#------------------------------------------------------------------------------
# Get Automake Variable
#------------------------------------------------------------------------------

# Map the prefix to the primary symbol (this is a simplified mapping).
function get_primary(product)
    define my.product = get_primary.product
    if (is_data(my.product))
        return "DATA"
    elsif (is_headers(my.product))
        return "HEADERS"
    elsif (is_java(my.product))
        return "JAVA"
    elsif (is_info(my.product))
        return "TEXINFOS"
    elsif (is_library(my.product))
        return "LTLIBRARIES"
    elsif (is_manual(my.product))
        return "MANS"
    elsif (is_program(my.product))
        return "PROGRAMS"
    elsif (is_python(my.product))
        return "PYTHON"
    elsif (is_script(my.product))
        return "SCRIPTS"
    endif
    abort "Unknown automake primary for prefix: '$(my.product.prefix)'"
endfunction

function get_qualified_prefix(product)
    define my.product = get_qualified_prefix.product
    require(my.product, "product", "prefix")
    define my.prefix = my.product.prefix
    define my.install = ""
    define my.distribute = ""

    # dist and nodist qualifications are mutually-exclusive and allow no check.
    if (!is_check(my.product))
        if (is_no_distribute(my.product))
            my.distribute = "nodist"
        elsif (is_distribute(my.product))
            my.distribute = "dist"
        endif
    endif

    # check and noinst qualifications are mutually-exclusive and use no prefix.
    if (is_check(my.product) | is_no_install(my.product))
        my.prefix = ""
        if (is_check(my.product))
            my.install = "check"
        elsif (is_no_install(my.product))
            my.install = "noinst"
        endif
    endif

    # join and return the non-empty parts
    return join(join(my.distribute, my.install, "_"), my.prefix, "_")
endfunction

# Get automake tag of the form: qualified-prefix[_container]
function get_tag(product, container)
    define my.product = get_tag.product
    if (is_empty(my.container))
        my.container = my.product.container ? ""
    endif
    if (!is_empty(my.container))
        my.container = "_$(my.container:c)"
    endif
    define my.qualified_prefix = get_qualified_prefix(my.product)
    return "$(my.qualified_prefix)$(my.container)"
endfunction

function get_automake_variable(product, segment)
    define my.product = get_automake_variable.product
    define my.tag = get_tag(my.product, my.segment)
    return join(my.tag, get_primary(my.product), "_")
endfunction

#------------------------------------------------------------------------------
# Get Automake Install
#------------------------------------------------------------------------------

# Get the target attribute, defaulting to [prefix]dir, bracketed as ${target}.
function get_target(product)
    require(my.product, "product", "prefix")
    define my.prefix = my.product.prefix

    # Workaround for failure of automake to properly handle noinst_JAVA.
    if (is_java(my.product) & is_no_install(my.product))
        my.prefix = "build"
    endif
    define my.target = "$(my.prefix)dir"
    return "${$(my.target)}"
endfunction

# Get the full install location.
function get_install(product, container)
    define my.product = get_install.product
    if (is_empty(my.container))
        my.container = my.product.container ?
    endif
    if (is_empty(my.container))
        return ""
    else
        my.container = "$(my.container)"
    endif
    define my.target = get_target(my.product)
    return "$(my.target)/$(my.container)"
endfunction

#------------------------------------------------------------------------------
# Get Product/Runner Path
#------------------------------------------------------------------------------

# Normalize the library name (as "name[.la]").
function get_archive_name(library, repository)
    define my.library = get_archive_name.library
    define my.repository = get_archive_name.repository
    return "$(target_name(my.library, my.repository)).la"
endfunction

# Normalize the product name.
function get_product_name(product, repository)
    define my.product = get_product_name.product
    define my.repository = get_product_name.repository
    if (is_program(my.product))
        return target_name(my.product, my.repository)
    elsif (is_library(my.product))
        return get_archive_name(my.product, my.repository)
    endif
    return ""
endfunction

# Create the product path.
function get_product_path(product, repository)
    define my.product = get_product_path.product
    define my.repository = get_product_path.repository
    return join(my.product.path, get_product_name(my.product, my.repository))
endfunction

# Get the command to execute the test runner. If there is a runner element the
# test runner is a generated script ${sourcedir}/[product.name]_runner.sh.
# Otherwise the runner is ${sourcedir}/[product.path]/[product.name].
function get_runner_path(product, repository)
    define my.product = get_runner_path.product
    define my.repository = get_runner_path.repository
    define my.name = get_product_name(my.product, my.repository)
    if (defined(my.product->runner))
        return "$(my.name)_runner.sh"
    endif
    return join(my.product.path, my.name)
endfunction

#------------------------------------------------------------------------------
# Render Files Variables
#------------------------------------------------------------------------------

function serialize_sources(files)
    define my.files = serialize_sources.files
    define my.buffer = ""
    for my.files.row as _row
        my.buffer += " \\\n    $(_row.name)"
    endfor
    return my.buffer
endfunction

function get_all_sources(folder, trim, product)
    define my.product = get_all_sources.product
    new files as _files
        get_all_product_files(_files, my.folder, my.trim, my.product)
        return serialize_sources(_files)
    endnew
endfunction

function render_sources(files, folder, base_trim, path_trim, product, mapper)
    define my.files = render_sources.files
    define my.product = render_sources.product
    define my.mapper = render_sources.mapper
    get_product_files(my.files, my.folder, my.base_trim, my.product, 1)
    if (!table_empty(my.files))
        # Don't write a tautology, such as: installdir = ${installdir}
        define my.trim = my.base_trim + my.path_trim + 1
        define my.relative = difference(my.folder, my.trim)
        define my.segment = join(my.product.container, my.relative)
        define my.install = get_install(my.product, my.segment)
        if (!is_empty(my.install))
            define my.tag = get_tag(my.product, my.segment)
            write_line("$(my.tag)dir = $(my.install)")
        endif
        define my.paths = serialize_sources(my.files)
        define my.op = get_assignment_operator(my.mapper, my.variable)
        define my.variable = get_automake_variable(my.product, my.segment)
        write_line("$(my.variable) $(my.op)$(my.paths)\n")
        table_clear(my.files)
    endif

    # Recurse the directory tree, rendering all files.
    define my.directory = open_directory(my.folder)
    for my.directory.directory as _directory by _directory.name
        define my.subfolder = "$(_directory.path)$(_directory.name)"
        render_sources(my.files, my.subfolder, my.base_trim, my.path_trim,\
            my.product, my.mapper)
    endfor
endfunction

# <files>
# Recurse directory tree, rendering outputs with files for each folder.
function render_files_variables(folder, base_trim, path_trim, product, mapper)
    define my.product = render_files_variables.product
    define my.mapper = render_files_variables.mapper
    new files as _files
        render_sources(_files, my.folder, my.base_trim, my.path_trim,\
            my.product, my.mapper)
    endnew
endfunction

#------------------------------------------------------------------------------
# Render CPP Variables
#------------------------------------------------------------------------------

function get_tests_variable(mapper, product, repository)
    define my.mapper = get_tests_variable.mapper
    define my.product = get_tests_variable.product
    define my.repository = get_tests_variable.repository
    define my.path = get_runner_path(my.product, my.repository)
    define my.variable = "TESTS"
    define my.operator = get_assignment_operator(my.mapper, my.variable)
    return "$(my.variable) $(my.operator) $(my.path)"
endfunction

function get_binaries_variable(mapper, product, repository)
    define my.mapper = get_binaries_variable.mapper
    define my.product = get_binaries_variable.product
    define my.repository = get_binaries_variable.repository
    define my.path = get_product_path(my.product, my.repository)
    define my.variable = get_automake_variable(my.product)
    define my.operator = get_assignment_operator(my.mapper, my.variable)
    return "$(my.variable) $(my.operator) $(my.path)"
endfunction

function initialize_cpp_variables(variables)
    define my.variables = initialize_cpp_variables.variables
    my.variables.libs = ""
    my.variables.ld_flags = ""
    my.variables.ccc_flags = ""
    my.variables.cxx_flags = ""
    my.variables.cpp_flags = ""
    my.variables.sources = ""
endfunction

# For each library of this product that references another product,
# copy the other product's library elements into this product element.
# This function is not idempotent, call only once for a given product.
function chase_libraries(product, make, repository)
    define my.product = chase_libraries.product
    define my.make = chase_libraries.make
    define my.repository = chase_libraries.repository
    define my.cursor = set_cursor_end(my.product)
    for my.product.library as _library
        define my.chase_product = find_library_product(_library.name,\
            my.make, my.repository)?
        if (defined(my.chase_product))
            for my.chase_product.library as _chase_library
                copy _chase_library before my.cursor
            endfor
        endif
    endfor
    clear_cursor(my.cursor)
endfunction

# Format the flag either as a literal flag or a dereferenced variable.
function get_flag(flag)
    define my.flag = get_flag.flag
    if (defined(my.flag.value))
        return "-$(my.flag.value)"
    elsif (defined(my.flag.define))
         return "-D$(my.flag.define:upper)=\\\"${$(my.flag.define)}\\\""
    elsif (defined(my.flag.substitute))
        return "${$(my.flag.substitute)}"
    endif
    abort "Required attribute missing: flag.value|define|substitute"
endfunction

function define_cpp_flag_variable(variables, flag)
    define my.variables = define_cpp_flag_variable.variables
    define my.flag = define_cpp_flag_variable.flag
    define my.flag_value = " $(get_flag(my.flag))"
    if (is_ccc_flag(my.flag))
        my.variables.ccc_flags += my.flag_value
    elsif (is_cxx_flag(my.flag))
        my.variables.cxx_flags += my.flag_value
    elsif (is_cpp_flag(my.flag))
        my.variables.cpp_flags += my.flag_value
    else
        define my.context = my.flag.context ? ""
        abort "Invalid flag context: '$(my.context)'."
    endif
endfunction

function define_cpp_lib_variables(variables, library, make, configure, repository)
    define my.variables = define_cpp_lib_variables.variables
    define my.library = define_cpp_lib_variables.library
    define my.make = define_cpp_lib_variables.make
    define my.configure = define_cpp_lib_variables.configure
    define my.repository = define_cpp_lib_variables.repository
    require(my.library, "library", "name")
    define my.product = find_library_product(my.library.name, my.make,\
        my.repository)?
    if (defined(my.product))
        define my.archive_name = get_archive_name(my.product, my.repository)
        my.archive_path = join(my.product.path, my.archive_name)
        my.variables.libs += " $(my.archive_path)"
    else
        define my.cname = "$(my.library.name:c)"
        define my.dependency = find_dependency_by_name(my.library.name,\
            my.configure)?
        if (!defined(my.dependency))
            abort "The product library has no dependency: $(my.library.name)"
        endif
        define my.is_package = is_package_dependency(my.dependency)
        define my.is_function = is_function_dependency(my.dependency)
        define my.is_boost = is_boost_dependency(my.dependency)
        define my.is_boost_lib = is_boost_lib_dependency(my.dependency)
        define my.is_language = is_java_dependency(my.dependency) |\
            is_python_dependency(my.dependency)
        define my.is_common = is_pthread_dependency(my.dependency) |\
            is_iconv_dependency(my.dependency)

        if (my.is_boost)
            my.variables.ld_flags += " ${$(my.cname)_LDFLAGS}"
        endif
        if (my.is_boost_lib | my.is_common | my.is_function | my.is_package)
            my.variables.libs += " ${$(my.cname)_LIBS}"
        endif
        if (my.is_boost | my.is_common | my.is_language | my.is_package)
            my.variables.cpp_flags += " ${$(my.cname)_SYS_CPPFLAGS}"
        endif
        if (0)
            my.variables.ccc_flags += " ${$(my.cname)_CFLAGS}"
        endif
        if (0)
            my.variables.cxx_flags += " ${$(my.cname)_CXXFLAGS}"
        endif
    endif
endfunction

# Get the automake library add output variable type.
function get_library_add(product)
    define my.product = get_library_add.product
    if (is_library(my.product))
        return "LIBADD"
    elsif (is_program(my.product))
        return "LDADD"
    endif
    abort "Unknown library type: '$(my.product.prefix)'"
endfunction

function write_cpp_variables(variables, product, repository)
    define my.variables = write_cpp_variables.variables
    define my.product = write_cpp_variables.product
    define my.repository = write_cpp_variables.repository
    define my.cpath = "$(get_product_path(my.product, my.repository):c)"
    if (defined(my.variables.tests))
        write_line("$(my.variables.tests)\n")
    endif
    if (defined(my.variables.binaries))
        write_line("$(my.variables.binaries)")
    endif
    if (!is_empty(my.variables.ccc_flags))
        write_line("$(my.cpath)_CFLAGS =$(my.variables.ccc_flags)")
    endif
    if (!is_empty(my.variables.cxx_flags))
        write_line("$(my.cpath)_CXXFLAGS =$(my.variables.cxx_flags)")
    endif
    if (!is_empty(my.variables.cpp_flags))
        write_line("$(my.cpath)_CPPFLAGS =$(my.variables.cpp_flags)")
    endif
    if (!is_empty(my.variables.ld_flags))
        write_line("$(my.cpath)_LDFLAGS =$(my.variables.ld_flags)")
    endif
    if (!is_empty(my.variables.libs))
        define my.add = get_library_add(my.product)
        write_line("$(my.cpath)_$(my.add) =$(my.variables.libs)")
    endif
    if (!is_empty(my.variables.sources))
        write_line("$(my.cpath)_SOURCES =$(my.variables.sources)")
    endif
    write_line()
endfunction

# Render c/c++ specific option variables.
function render_cpp_variables(product, root, repository, mapper)
    define my.product = render_cpp_variables.product
    define my.repository = render_cpp_variables.repository

    if (is_cpp(my.product))
        define my.make = my.repository->make
        define my.configure = my.repository->configure
        define my.root_length = string.length(my.root)
        new variables as _variables
        initialize_cpp_variables(_variables)
        chase_libraries(my.product, my.make, my.repository)

        # Define _PROGRAMS|_[LT]LIBRARIES variables.
        _variables.binaries = get_binaries_variable(my.mapper, my.product,\
            my.repository)

        # Define TESTS variable.
        if (is_test(my.product))
            _variables.tests = get_tests_variable(my.mapper, my.product,\
                my.repository)
        endif

        # Define _LDFLAGS from an override of Libtool default naming.
        if (is_true(my.product.unprefixed))
            _variables.ld_flags += " -module"
        endif

        # Define _CPPFLAGS values from input.
        for my.product.headers as _headers
            require(_headers, "headers", "path")
            _variables.cpp_flags += " -I${srcdir}/$(_headers.path)"
        endfor

        # Define _C??FLAGS values from input.
        for my.product.flag as _flag
            define_cpp_flag_variable(_variables, _flag)
        endfor

        # Define _LIBS|_LDFLAGS|C??FLAGS variables from libraries.
        for my.product.library as _library
            define_cpp_lib_variables(_variables, _library, my.make,\
                my.configure, my.repository)
        endfor

        # <sources>
        # Define _SOURCES variable from sources elements.
        for my.product.sources as _sources
            require(_sources, "sources", "path")
            define my.folder = "$(my.root)$(_sources.path)"
            _variables.sources += get_all_sources(my.folder, my.root_length,\
                my.product)
        endfor

        write_cpp_variables(_variables, my.product, my.repository)
        endnew
    endif
endfunction

#------------------------------------------------------------------------------
# Render Java Variables
#------------------------------------------------------------------------------

# Render java specific variables: JAVA.
function render_java_variables(product, root, repository, mapper)
    define my.product = render_java_variables.product
    define my.repository = render_java_variables.repository
    if (is_java(my.product))
        define my.operator = get_assignment_operator(my.mapper, "CLEANFILES")
        write_line("CLEANFILES $(my.operator) ${java_builddir}/*.class\n")
        write_line("distclean-local:")
        write_line("\t-rm -rf ${java_builddir} ${jar_builddir}\n")
    endif
endfunction

#------------------------------------------------------------------------------
# Render Jar Variables
#------------------------------------------------------------------------------

function get_java_stamp_variable(product)
    define my.product = get_java_stamp_variable.product
    define my.container = my.product.container?
    define my.prefix = is_empty(my.container) ?? "javaexec" ? ""
    define my.install = is_no_install(my.product) ?? "noinst" ? my.prefix
    return join(my.install, "$(my.container:c)", "_")
endfunction

function get_java_stamp(repository)
    define my.repository = get_java_stamp.repository
    define my.make = my.repository->make?
    if (defined(my.make))
        define my.java_product = my.make->product(prefix = "javaexec")?
        if (defined(my.java_product))
            define my.prefix = get_java_stamp_variable(my.java_product)
            return "class$(my.prefix).stamp"
        endif
    endif
    abort "The make is missing a required java product."
endfunction

# Render jar specific variables: jar_DATA.
function render_jar_variables(product, root, repository, mapper)
    define my.product = render_jar_variables.product
    define my.repository = render_jar_variables.repository
    if (is_jar(my.product))
        define my.stamp = get_java_stamp(my.repository)
        define my.variable = get_automake_variable(my.product)
        define my.operator = get_assignment_operator(my.mapper, "CLEANFILES")
        write_line("${$(my.variable)}: $(my.stamp)")
        write_line("\t${JAR} cf ${JARFLAGS} ${$(my.variable)} -C ${java_builddir} .\n")
        write_line("CLEANFILES $(my.operator) ${jar_builddir}/*.jar\n")
    endif
endfunction

#------------------------------------------------------------------------------
# Render Python Variables
#------------------------------------------------------------------------------

# Render python specific variables: PYTHON.
function render_python_variables(product, root, repository, mapper)
    define my.product = render_python_variables.product
    define my.repository = render_python_variables.repository
    if (is_python(my.product))
        # TODO: add python features.
    endif
endfunction

#------------------------------------------------------------------------------
# Render File Variables
#------------------------------------------------------------------------------

function get_source_directory(product)
    define my.product = get_source_directory.product
    if (is_jar(my.product))
        return "${jar_builddir}"
    endif
    return ""
endfunction

# <file>
function render_file_variables(product, mapper)
    define my.product = render_file_variables.product
    define my.file = ""
    define my.source = get_source_directory(my.product)
    for my.product.file as _file where !is_empty(_file.path) by _file.path
        define my.path = join(my.source, _file.path)
        my.file += " \\\n    $(my.path)"
    endfor
    if (!is_empty(my.file))
        # Don't write a tautology, such as: installdir = ${installdir}.
        define my.install = get_install(my.product, my.container)
        if (!is_empty(my.install))
            define my.tag = get_tag(my.product)
            write_line("$(my.tag)dir = $(my.install)")
        endif
        define my.variable = get_automake_variable(my.product)
        define my.operator = get_assignment_operator(my.mapper, my.variable)
        write_line("$(my.variable) $(my.operator)$(my.file)\n")
    endif
endfunction

#------------------------------------------------------------------------------
# Render Product
#------------------------------------------------------------------------------

# Get a product description for comments.
function get_product_description(repository, product, container)
    define my.product = get_product_description.product
    define my.repository = get_product_description.repository
    define my.target = get_target(my.product)
    if (is_cpp(my.product))
        define my.path = get_product_path(my.product, my.repository)
        if (is_check(my.product) | is_no_install(my.product))
            return "local: $(my.path)"
        endif
        return "$(my.path) => $(my.target)"
    elsif (is_jar(my.product))
        if (is_no_install(my.product))
            return "*.class => *.jar (local), requires ax_java_devel.m4"
        endif
        return "*.class => *.jar => $(my.target), requires ax_java_devel.m4"
    elsif (is_java(my.product))
        if (is_no_install(my.product))
            return "*.java => *.class (local), requires ax_java_devel.m4"
        endif
        return "*.java => *.class => $(my.target), requires ax_java_devel.m4"
    endif
    define my.install = get_install(my.product)
    if (is_empty(my.install))
        my.install = my.target
    endif
    return "files => $(my.install)"
endfunction

function render_product_variables(product, root, repository, mapper)
    define my.product = render_product_variables.product
    define my.repository = render_product_variables.repository

    # <file> are enumerated in metadata, just render them.
    render_file_variables(my.product, my.mapper)

    for my.product.files as _files
        require(_files, "files", "path")
        define my.folder = "$(my.root)$(_files.path)"
        define my.root_length = string.length(my.root)
        define my.path_length = string.length(_files.path)

        # <files> are enumerated by directory and mapped to targets.
        render_files_variables(my.folder, my.root_length, my.path_length,\
            my.product, my.mapper)
    endfor

    render_cpp_variables(my.product, my.root, my.repository, my.mapper)
    render_java_variables(my.product, my.root, my.repository, my.mapper)
    render_jar_variables(my.product, my.root, my.repository, my.mapper)
    render_python_variables(my.product, my.root, my.repository, my.mapper)
endfunction

# <product>
function render_product(product, root, repository, mapper)
    define my.product = render_product.product
    define my.repository = render_product.repository
    define my.configure = my.repository->configure
    define my.option = find_option_symbol(my.product, my.configure)?
    if (defined(my.option))
        write_line("if $(my.option:upper)\n")
    endif
    render_product_variables(my.product, my.root, my.repository, my.mapper)
    if (defined(my.option))
        write_line("endif $(my.option:upper)\n")
    endif
endfunction

#------------------------------------------------------------------------------
# Make Targets
#------------------------------------------------------------------------------

# For each option, write all paths to the option-named target.
function render_make_targets(targets)
    define my.targets = render_make_targets.targets
    define my.last_row_name = ""
    for my.targets.row as _outer by _outer.name
        if (_outer.name = my.last_row_name)
            next _outer
        endif
        define my.target = ""
        my.last_row_name = _outer.name
        for my.targets.row as _inner where (_inner.name = _outer.name)
            my.target += " \\\n    $(_inner.value)"
        endfor
        heading2("make target: $(_outer.name)")
        write_line("target_$(_outer.name) =$(my.target)\n")
        write_line("$(_outer.name): ${target_$(_outer.name)}\n")
    endfor
endfunction

# For each non-test product that is not a test, accumulate the product's
# option (name) and path (value) in the targets table.
function define_make_targets(repository, make, targets)
    define my.repository = define_make_targets.repository
    define my.make = define_make_targets.make
    define my.targets = define_make_targets.targets
    for my.make.product as _product where is_custom_target(_product)
        define my.path = get_product_path(_product, my.repository)
        if (!is_empty(my.path))
            table_add(my.targets, _product.option, my.path)
        endif
    endfor
endfunction

#------------------------------------------------------------------------------
# Automake Variables
#------------------------------------------------------------------------------

function initialize_automake()
    heading2("Look for macros in the m4 subdirectory.")
    write_line("ACLOCAL_AMFLAGS = -I m4\n")
endfunction

function render_make_variables(table)
    define my.table = render_make_variables.table
    for my.table.row as _row
        write_line("$(_row.name) =")
    endfor
endfunction

function is_multiple_first_optional(table, row)
    define my.table = is_multiple_first_optional.table
    define my.row = is_multiple_first_optional.row
    define my.name = my.row.name
    define my.value = my.row.value
    return !is_empty(my.value) &\
        (table_ordinal(my.table, my.name, 0) = my.value) &\
        (table_count(my.table, my.name) > 1)
endfunction

function get_make_variables(make, variables, mapper)
    define my.make = get_make_variables.make
    define my.variables = get_make_variables.variables
    define my.mapper = get_make_variables.mapper
    new table as _table
        for my.make.product as _product
            define my.option = _product.option ? ""
            define my.variable = get_automake_variable(_product)
            table_add(_table, my.variable, my.option)
            if (is_test(_product))
                table_add(_table, "TESTS", my.option)
            endif
            if (is_clean_files(_product))
                table_add(_table, "CLEANFILES", my.option)
            endif
        endfor
        for _table.row as _row where is_multiple_first_optional(_table, _row)
            map_add(my.mapper, _row.name)
            table_add(my.variables, _row.name, "")
        endfor
    endnew _table
endfunction

# Get an = or += depending on whether it's the first or later use.
function get_assignment_operator(mapper, variable)
    define my.found = map_exists(my.mapper, my.variable)
    map_add(my.mapper, my.variable)
    return my.found ?? "+=" ? "="
endfunction

###############################################################################
# Generation
###############################################################################

function generate_automake(path_prefix)
for generate.repository as _repository by _repository.name\
    where (defined(_repository->make))

    require(_repository, "repository", "name")
    my.output_path = join(my.path_prefix, _repository.name)
    create_directory(my.output_path)
    define my.out_file = "$(my.output_path)/Makefile.am"
    notify(my.out_file)
    output(my.out_file)

    copyleft(_repository.name)
    define my.make = _repository->make
    define my.absolute = "$(global.root)/$(_repository.name)"
    define my.base = normalize_directory(my.absolute)

    heading1("Automake settings.")
    initialize_automake()

    new mapper as _mapper
        new variables as _variables
            get_make_variables(my.make, _variables, _mapper)
            if (!table_empty(_variables))
                heading1("Conditional variables.")
                render_make_variables(_variables)
            endif
        endnew _variables

        heading1("Distribute, make and install products.")
        for my.make.product as _product
            heading2(get_product_description(_repository, _product))
            render_product(_product, my.base, _repository, _mapper)
        endfor
    endnew _mapper

    new targets as _targets
        define_make_targets(_repository, my.make, _targets)
        if (!table_empty(_targets))
            heading1("Custom make targets.")
            render_make_targets(_targets)
        endif
   endnew _targets

    close
endfor _repository
endfunction # generate_automake
.endtemplate
.template 0
###############################################################################
# Execution
###############################################################################
[global].root = ".."
[global].trace = 0
[gsl].ignorecase = 0

# Note: expected context root libbitcoin-build directory
gsl from "library/math.gsl"
gsl from "library/string.gsl"
gsl from "library/collections.gsl"
gsl from "utilities.gsl"

generate_automake("output")

.endtemplate
