.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin .travis.yml.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

function apt_get(name, system)
    define my.get = ""
    if (my.system = "osx")
        my.get = "brew install $(my.name)"
    elsif (my.system = "linux")
    else
        abort "Invalid system type for get package: $(my.name)."
    endif
    return my.get
endfunction

# We must do this because lcov is uses exclusions only.
function job_coverage_exclusions(job, repository)
    define my.job = job_coverage_exclusions.job
    define my.repository = job_coverage_exclusions.repository

    # Exclude all system directories.
    define my.excludes = quote("/usr/*")

    # Exclude the prefix directory (absolute).
    define my.prefix = job_option(my.job, "prefix")?
    if (!is_empty(my.prefix))
        my.excludes += " $(quote("$(my.prefix)/*"))"
    endif

    # Exclude the build-dir directory (relative to main target).
    define my.build_dir = job_option(my.job, "build-dir")?
    if (is_empty(my.build_dir))
        define my.library = my.repository.name
        my.excludes += " $(quote("build-$(my.library)/*"))"
    else
        my.excludes += " $(quote("$(my.build_dir)/*"))"
    endif

    # Exclude directories of cpp products that are not installed (relative).
    define my.make = my.repository->make?
    if (defined(my.make))
        for my.make.product as _product where is_not_covered(_product)
            my.excludes += " $(quote("$(_product.path)/*"))"
        endfor _product
    endif

    # Exclude explicitly-specified paths.
    for my.job.exclude as _exclude
        my.excludes += " $(quote(_exclude.path))"
    endfor _exclude

    return my.excludes
endfunction

function job_options(job)
    define my.job = job_options.job
    define my.job_options = ""
    for my.job.option as _option
        my.job_options += " $(_option.value)"
    endfor _option
    return trim_left(my.job_options)
endfunction

function job_install(job, restrict_parallel)
    define my.job = job_install.job
    define my.parallel = job_install.restrict_parallel ?? "PARALLEL=1 " ? ""
    define my.sudo = is_true(my.job.sudo) ?? "sudo " ? ""
    define my.compiler = "CC=$CC CXX=$CXX "
    return "$(my.sudo)$(my.compiler)$(my.parallel)./install.sh $(job_options(my.job))"
endfunction

function job_predicate_link(job)
    define my.job = job_predicate_link.job
    return "$$(my.job.link:upper,c%-7s)"
endfunction

function job_predicate_system(job)
    define my.job = job_predicate.job
    return "$$(my.job.system:upper,c%-5s)"
endfunction

function job_predicate_compiler(job)
    define my.job = job_predicate_compiler.job
    return "$$(my.job.compiler:upper,c%-5s)"
endfunction

function job_predicate_platform(job)
    define my.job = job_predicate_platform.job
    return "$(job_predicate_system(my.job)) && $(job_predicate_compiler(my.job))"
endfunction

function job_predicate(job)
    define my.job = job_predicate.job
    return "$(job_predicate_platform(my.job)) && $(job_predicate_link(my.job))"
endfunction

function condition(predicate)
    return "if [[ $(my.predicate) ]]; then"
endfunction

function is_system_linux(job)
    define my.job = is_system_linux.job
    return defined(my.job) & my.job.system = "linux"
endfunction

function is_system_osx(job)
    define my.job = is_system_osx.job
    return defined(my.job) & my.job.system = "osx"
endfunction

function is_compiler_clang(job)
    define my.job = is_compiler_clang.job
    return defined(my.job) & my.job.compiler = "clang"
endfunction

function is_compiler_gcc(job)
    define my.job = is_compiler_gcc.job
    return defined(my.job) & my.job.compiler = "gcc"
endfunction

function is_travis_job(job)
    define my.job = is_travis_job.job
    return is_system_linux(my.job) | is_system_osx(my.job)
endfunction

function is_versioned_compiler(job)
    define my.job = is_versioned_compiler.job
    return defined(my.job) & defined(my.job.version)
endfunction

function get_compiler_version(job)
    define my.job = get_compiler_version.job
    return is_versioned_compiler(my.job) ?? "$(my.job.version)" ? ""
endfunction

function cc_flags(job)
    define my.job = cc_flags.job
    define version = get_compiler_version(my.job)
    if (is_empty(version) | (version = "latest"))
        return "$(my.job.compiler)"
    endif
    return "$(my.job.compiler)-$(version)"
endfunction

function compiler_package_name(job)
    define my.job = compiler_package_name.job
    return is_compiler_gcc(my.job) ?? "g++" ?\
        "$(my.job.compiler)"
endfunction

function cxx_compiler_name(job)
    define my.job = cxx_compiler_name.job
    return is_compiler_gcc(my.job) ?? "g++" ?\
        "$(my.job.compiler)++"
endfunction

function cxx_flags(job)
    define my.job = cxx_flags.job
    define version = get_compiler_version(my.job)
    define mapped_compiler = cxx_compiler_name(my.job)

    if (is_empty(version) | (version = "latest"))
        return "$(mapped_compiler)"
    endif

    return "$(mapped_compiler)-$(version)"
endfunction

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro initialize_job(job)
.   define my.job = initialize_job.job
.   define has_addons = (my.job.system = "linux") &\
        ((is_versioned_compiler(my.job) | is_coverage_job(my.job) |\
        count(my.job.get) > 0) | (is_compiler_clang(my.job) &\
        is_versioned_compiler(my.job)))
        - os: $(my.job.system)
          compiler: $(my.job.compiler)
          env: LINK=$(my.job.link)
.   if (has_addons)
          addons:
            apt:
.       if (is_compiler_clang(my.job) & is_versioned_compiler(my.job))
              sources:
                - sourceline: 'ppa:h-rayflood/llvm'
.       endif
.       if (is_versioned_compiler(my.job) | is_coverage_job(my.job) | count(my.job.get) > 0)
              packages:
.           if (is_versioned_compiler(my.job))
                - $(compiler_package_name(my.job))-$(get_compiler_version(my.job))
.           endif
.           if (is_coverage_job(my.job))
                - lcov
.           endif
.           for my.job.get as _get
                - $(_get.name)
.           endfor _get
.       endif
.   endif
.endmacro #initialize_job
.
.macro initialize_matrix(matrix)
.   define my.matrix = initialize_matrix.matrix
addons:
    apt:
        sources:
            - boost-latest
            - ubuntu-toolchain-r-test

matrix:
    include:
.   for my.matrix.job by "$(compiler)-$(link)" as _job where is_system_osx(_job)
.       initialize_job(_job)
.   endfor _job
.   for my.matrix.job by "$(compiler)-$(link)" as _job where is_system_linux(_job)
.       initialize_job(_job)
.   endfor _job
    fast_finish:
        - true

.endmacro #initialize_matrix
.
.macro set_aliases(matrix)
.   define my.matrix = set_aliases.matrix
    # Set aliases for readability.
    - $(condition("$CC             == gcc    ")) GCC=true; fi
    - $(condition("$CC             == clang  ")) CLANG=true; fi
    - $(condition("$LINK           == static ")) STATIC=true; fi
    - $(condition("$LINK           == dynamic")) DYNAMIC=true; fi
    - $(condition("$TRAVIS_OS_NAME == osx    ")) OSX=true; fi
    - $(condition("$TRAVIS_OS_NAME == linux  ")) LINUX=true; fi

.endmacro #set_aliases
.
.macro update_environment(matrix)
.   define my.matrix = update_environment.matrix
    # Update homebrew.
    - if [[ $OSX   && $CLANG             ]]; then brew update; fi

.endmacro #update_environment
.
.# The --build-dir install.sh option is not supported by this code coverage tool.
.macro code_coverage(repository)
.   define my.repository = code_coverage.repository
.   if (count_matrix_coverage_job(my.repository->matrix) > 0)
    # Install coveralls and current lcov.
.      for my.repository->matrix.job as _job where is_coverage_job(_job)
.           define my.job_condition = condition(job_predicate(_job))
    - $(my.job_condition) gem install coveralls-lcov; fi
.      endfor

    # Capture coverage info, filter out system and test code, and debug before upload.
.      for my.repository->matrix.job as _job where is_coverage_job(_job)
.           define my.job_condition = condition(job_predicate(_job))
.           define my.exclusions = job_coverage_exclusions(_job, my.repository)
    - $(my.job_condition) lcov --directory . --capture --output-file coverage.info; fi
    - $(my.job_condition) lcov --remove coverage.info $(my.exclusions) --output-file coverage.info; fi
    - $(my.job_condition) lcov --list coverage.info; fi
.       endfor

    # Upload coverage info to coveralls service (--repo-token <private coveralls repo token>).
.      for my.repository->matrix.job as _job where is_coverage_job(_job)
.           define my.job_condition = condition(job_predicate(_job))
    - $(my.job_condition) coveralls-lcov coverage.info; fi
.       endfor
.   endif

.endmacro #code_coverage
.
.macro install_packages(matrix)
.   define my.matrix = install_packages.matrix
    # Export CC/CXX to control compiler/version.
.   for my.matrix.job as _job where is_travis_job(_job)
.       define cc = cc_flags(_job)
.       define cxx = cxx_flags(_job)
    - $(condition(job_predicate(_job))) export CC=$(cc); export CXX=$(cxx); fi
.   endfor _job

    # Download and install packages.
.   for my.matrix.job as _job where is_travis_job(_job) & count(_job.get) > 0
.       for _job.get as _get
.           if (_get.name = "boost")
.           elsif (_job.system = "osx")
    - $(condition(job_predicate(_job))) $(apt_get(_get.name, _job.system)); fi
.           elsif (_job.system = "linux")
.           else
.               abort "Invalid system type for get package: $(my.name)."
.           endif
.       endfor _get
.   endfor _job

.endmacro #install_packages
.
.macro run_script(matrix)
.   define my.matrix = run_script.matrix
.   define my.restrict_parallel = is_true(my.matrix->job.sudo)
    # Download and build $(_repository.name) and all dependencies.
.   for my.matrix.job as _job where is_travis_job(_job)
    - $(condition(job_predicate(_job))) $(job_install(_job, my.restrict_parallel)); fi
.   endfor _job

.endmacro #run_script
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
.endtemplate
.template 1
.macro generate_travis_yml(path_prefix)
.for generate.repository by name as _repository
.   require(_repository, "repository", "name")
.   my.output_path = join(my.path_prefix, _repository.name)
.   create_directory(my.output_path)
.   define my.out_file = "$(my.output_path)/.travis.yml"
.   notify(my.out_file)
.   output(my.out_file)
.   copyleft(_repository.name)
.   define my.matrix = _repository->matrix
.   define my.sudo = is_true(my.matrix->job.sudo) ?? "true" ? "false"
sudo:
    - $(my.sudo)

language:
    - cpp

.   initialize_matrix(my.matrix)
before_install:

.   set_aliases(my.matrix)
.   update_environment(my.matrix)
install:

.   install_packages(my.matrix)
script:

.   run_script(my.matrix)
after_success:

.   code_coverage(_repository)
.
.   close
.endfor _repository
.endmacro # generate_travis_yml
.endtemplate
.template 0
###############################################################################
# Execution
###############################################################################
[global].root = ".."
[global].trace = 0
[gsl].ignorecase = 0

# Note: expected context root libbitcoin-build directory
gsl from "library/math.gsl"
gsl from "library/string.gsl"
gsl from "library/collections.gsl"
gsl from "utilities.gsl"

generate_travis_yml("output")

.endtemplate
