.template 0
###############################################################################
# Copyright (c) 2014-2025 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin ci.yml.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

function workflow_relative_path(repository, path_prefix)
    define my.repository = workflow_relative_path.repository
    require(my.repository, "repository", "name")
    define my.subpath = ".github/workflows"
    return append_path(append_path(my.path_prefix,\
        canonical_path_name(my.repository)), my.subpath)
endfunction

function sort_compiler(job)
    define my.job = sort_compiler.job
    return (defined(my.job) & defined(my.job.compiler)) ?? my.job.compiler ? \
        "default"
endfunction

function is_system_windows(job)
    define my.job = is_system_windows.job
    return defined(my.job) & my.job.system = "windows"
endfunction

function is_job_config(configuration, job)
    define my.config = is_job_config.configuration
    define my.job = is_job_config.job
    return defined(my.job.build) \
      & (!defined(my.config.job_require) | defined(my.job.$(my.config.job_require))) \
      & (((my.job.build = "all") & (defined(my.config.accept_all))) \
      | (my.job.build = my.config.job))
endfunction

function is_job_autotools(job)
    define my.job = is_job_autotools.job
    return defined(my.job.build) \
      | (my.job.build = "auto") \
      | (my.job.build = "all")
endfunction

function is_job_cmake(job)
    define my.job = is_job_cmake.job
    return defined(my.job.build) & \
        ((my.job.build = "cmake") | (my.job.build = "all"))
endfunction

function is_job_preset(job)
    define my.job = is_job_preset.job
    return defined(my.job.build) & \
        ((my.job.build = "preset") | \
        ((my.job.build = "all") & (defined(my.job.preset))))
endfunction

function has_jobs_autotools(ci)
    define my.ci = has_jobs_autotools.ci
    return (count(my.ci.job, (count.system = "linux") & is_job_autotools(count)) \
        + count(my.ci.job, (count.system = "osx") & is_job_autotools(count))  > 0)
endfunction

function has_jobs_cmake(ci)
    define my.ci = has_jobs_cmake.ci
    return (count(my.ci.job, (count.system = "linux") & is_job_cmake(count)) \
        + count(my.ci.job, (count.system = "osx") & is_job_cmake(count)) > 0)
endfunction

function has_jobs_presets(ci)
    define my.ci = has_jobs_presets.ci
    return (count(my.ci.job, (count.system = "linux") & is_job_preset(count)) \
        + count(my.ci.job, (count.system = "osx") & is_job_preset(count)) > 0)
endfunction

function has_jobs_msbuild(ci)
    define my.ci = has_jobs_msbuild.ci
    return (count(my.ci.job, (count.system = "windows"))  > 0)
endfunction

function get_job_os(job)
    define my.job = get_job_os.job
    define my.os = ""

    if (is_empty(my.job.system))
        abort "get_job_os failed due to missing job.system value."
    elsif (defined(my.job.image))
        my.os = my.job.image
    elsif (my.job.system = "linux")
        my.os = "ubuntu-latest"
    elsif (my.job.system = "osx")
        my.os = "macos-latest"
    elsif (my.job.system = "windows")
        my.os = "windows-latest"
    else
        abort "get_job_os failed due to unsupported job.system value '$(my.job.system)'."
    endif

    return my.os
endfunction # get_job_os

function get_job_preset(job)
    define my.job = get_job_preset.job
    require(my.job, "job", "preset")
    return my.job.preset
endfunction # get_job_preset

function get_job_options(job, config)
    define my.job = get_job_options.job
    define my.config = get_job_options.config

    define my.toolset = ""
    if (defined(my.job.build))
        if (my.job.build = 'all')
            my.toolset = my.config.job
        elsif ((my.job.build = 'autotools') | (my.job.build = 'cmake') | (my.job.build = 'preset'))
            my.toolset = my.job.build
        else
            abort("get_job_options: unsupported job build value '$(my.job.build)'.")
        endif
    endif

    if (my.toolset = 'preset')
        my.toolset = 'cmake'
    endif

    define my.result = ""
    for my.job.option as _option where (defined(_option.$(my.toolset)))
        my.result = join(my.result, _option.$(my.toolset), " ")
    endfor

    return my.result
endfunction # get_job_options

function get_job_packager(job)
    define my.job = get_job_packager.job
    define my.packager = ""

    if (my.job.system = "linux")
        my.packager = "apt"
    elsif (my.job.system = "osx")
        my.packager = "brew"
    else
        abort "get_job_packager failed due to unsupported job.system value '$(my.job.system)'."
    endif

    return my.packager
endfunction # get_job_packager

function sanitized_link(job)
    define my.job = sanitized_link.job
    require(my.job, "job", "link")
    define my.result = ""

    if (my.job.link = "dynamic")
        my.result = "Dynamic"
    elsif (my.job.link = "static")
        my.result = "Static"
    else
        abort "sanitized_link failed due to unsupported job.link value '$(my.job.link)'."
    endif

    return my.result
endfunction

function sanitized_assert(job)
    define my.job = sanitized_assert.job
    require(my.job, "job", "assert")
    define my.result = ""

    if (my.job.assert = "debug")
        my.result = "Debug"
    elsif (my.job.assert = "ndebug")
        my.result = "Release"
    else
        abort "sanitized_assert failed due to unsupported job.assert value '$(my.job.assert)'."
    endif

    return my.result
endfunction

function get_job_windows_configuration(job)
    define my.job = get_job_windows_configuration.job
    return "$(sanitized_link(my.job))$(sanitized_assert(my.job))"
endfunction # get_job_windows_configuration

function get_job_windows_platform(job)
    define my.job = get_job_windows_platform.job
    require(my.job, "job", "compiler")
    return my.job.compiler
endfunction # get_job_windows_platform

function has_axis_value(job, name, value)
    define my.job = has_axis_value.job
    define my.name = has_axis_value.name
    define my.value = has_axis_value.value

    return (count(my.job.axis, (count.name = my.name)) = 1) &\
      defined(my.job->axis(axis.name = my.name).value) &\
      (my.job->axis(axis.name = my.name).value = my.value)
endfunction # has_axis_value

function get_job_packages(integration, repository, job)
    define my.integration = get_job_packages.integration
    define my.repository = get_job_packages.repository
    define my.job = get_job_packages.job
    define my.packages = ""
    define my.spacer = ""

    for my.repository->ci.axis as _axis
        if (!has_axis_value(my.job, _axis.name, "build"))
            if (count(my.integration.dependency, (count.name  = _axis.name) &\
                (count.os = my.job.system) & defined(count.package)) = 1)
                my.pname = my.integration->dependency((name = _axis.name) &\
                    (os = my.job.system)).package
                my.packages = "$(my.packages)$(my.spacer)$(my.pname)"
                my.spacer = " "
            endif
        endif
    endfor

    if (defined(my.job.coverage) & !(my.job.coverage = "false"))
        my.packages = "$(my.packages)$(my.spacer)lcov"
        my.spacer = " "
    endif

    return "$(my.packages)"
endfunction # get_job_packages

function get_job_compiler(job)
    define my.job = get_job_compiler.job
    define my.compiler = ""

    if (my.job.system = "osx")
        my.compiler = "clang"

        if (!is_empty(my.job.compiler))
            abort "Continuious Integration 'osx' job has extraneous 'compiler' property."
        endif
    elsif (my.job.system = "linux")
        if (is_empty(my.job.compiler))
            abort "get_job_compiler failed due to missing job.compiler value."
        elsif ((my.job.compiler = "gcc") | (my.job.compiler = "clang"))
            my.compiler = "$(my.job.compiler)"
        else
            abort "get_job_compiler failed due to unsupported job.compiler value $(my.job.compiler)."
        endif
    else
        abort "get_job_compiler unrecognized system value $(my.job.system)"
    endif

    return "$(my.compiler)"
endfunction # get_job_compiler

function get_job_optimization(job)
    define my.job = get_job_optimization.job
    define my.value = ""

    if (!defined(my.job.optimization))
        abort "get_job_optimization failed due to undefined 'optimization' property."
    endif

    if (!(my.job.optimization = "debug") & !(my.job.optimization = "size"))
        abort "get_job_optimization value '$(my.job.optimization)' unrecognized."
    endif

    return my.job.optimization
endfunction # get_job_optimization

function get_job_compiler_package(job)
    define my.job = get_job_compiler_package.job
    define my.version = ""

    if (!is_empty(my.job.version))
        my.version = "-$(my.job.version)"
    endif

    return "$(get_job_compiler(my.job))$(my.version)"
endfunction # get_job_compiler_package

function get_job_assert(job)
    define my.job = get_job_assert.job

    if (defined(my.job.assert) &\
      (!(my.job.assert = "debug") & !(my.job.assert = "ndebug")))
      abort "Expected job.assert defined as either 'debug' or 'ndebug'."
    endif

    return my.job.assert ? "ndebug"
endfunction # get_job_assert

function get_job_cc(job)
    define my.job = get_job_cc.job
    define my.version = ""
    define my.compiler = get_job_compiler(my.job)

    if (!is_empty(my.job.version))
        my.version = "-$(my.job.version)"
    endif

    if !(my.compiler = "gcc") & !(my.compiler = "clang")
        abort "get_job_cc failed due to unsupported compiler value."
    endif

    return "$(my.compiler)$(my.version)"
endfunction # get_job_cc

function get_job_cxx(job)
    define my.job = get_job_cxx.job
    define my.version = ""
    define my.compiler = ""
    define my.specified_compiler = get_job_compiler(my.job)

    if (!is_empty(my.job.version))
        my.version = "-$(my.job.version)"
    endif

    if (my.specified_compiler = "gcc")
        my.compiler = "g++"
    elsif (my.specified_compiler = "clang")
        my.compiler = "clang++"
    else
        abort "get_job_cxx failed due to unsupported compiler value."
    endif

    return "$(my.compiler)$(my.version)"
endfunction # get_job_cxx

function get_job_link(job)
    define my.job = get_job_link.job
    define my.option = ""

    if (is_empty(my.job.link))
        abort "get_job_link failed due to missing job.link value."
    elsif (!(my.job.link = "dynamic") & !(my.job.link = "static"))
        abort "get_job_link failed due to unsupported job.link value."
    endif

    return my.job.link
endfunction # get_job_link

function get_job_cflags(integration, repository, job)
    define my.integration = get_job_cflags.integration
    define my.repository = get_job_cflags.repository
    define my.job = get_job_cflags.job
    define my.flags = ""

    if (is_empty(my.job.optimization))
        abort "get_job_cflags expects job.optimization, no value provided."
    elsif (my.job.optimization = "size")
        my.flags = "-Os"
    elsif (my.job.optimization = "debug")
        my.flags = "-Og"
    else
        abort "get_job_cflags unsupported job.optimization value '$(my.job.optimization)."
    endif

    if (defined(my.job.cflags))
        my.flags = "$(my.flags) $(my.job.cflags)"
    endif

    if (!is_empty(my.job.coverage) & (my.job.coverage = "true"))
        my.flags = "$(my.flags) -g --coverage"
    endif

    if ((my.job.system = "osx") & (my.job.link = "static"))
        my.flags = "$(my.flags) -fvisibility=hidden"
    endif

    my.flags = "$(my.flags) -fPIE"

    for my.repository->ci.axis as _axis
        if (!has_axis_value(my.job, _axis.name, "build"))
            if (count(my.integration.dependency, ((count.name = _axis.name) & (count.os = my.job.system))) = 1)
                define my.dependency = my.integration->dependency(\
                    (name = _axis.name) & (os = my.job.system))

                if (defined(my.dependency.path))
                    my.flags = "$(my.flags) -I$(my.dependency.path)/include"
                endif
            endif
        endif
    endfor

    return "$(my.flags)"
endfunction # get_job_cflags

function get_job_axis_value(configuration, decl, job, axis)
    define my.config = get_job_axis_value.configuration
    define my.decl = get_job_axis_value.decl
    define my.job = get_job_axis_value.job
    define my.axis = get_job_axis_value.axis
    define my.value = ""

    define my.axis_with = "--with-$(my.axis.name)"
    define my.axis_without = "--without-$(my.axis.name)"

    if (defined(my.config.cmake) & !defined(my.decl.recognized))
        my.axis_with = "-Dwith-$(my.axis.name)=yes"
        my.axis_without = "-Dwith-$(my.axis.name)=no"
    endif

    if (!defined(my.axis.value))
        my.value = get_job_axis_default(my.decl, my.job)
    elsif (my.axis.value = "build")
        if (!defined(my.decl.build) | !(my.decl.build = "true"))
            abort "Disallowed value 'build' provided for axis '$(my.axis.name)'."
        endif

        if (defined(my.decl.buildwith) & (my.decl.buildwith = "true") &\
          defined(my.decl.with) & (my.decl.with = "true"))
            my.value = "--build-$(my.axis.name) $(my.axis_with)"
        else
            my.value = "--build-$(my.axis.name)"
        endif
    elsif (my.axis.value = "with")
        if (!defined(my.decl.with) | !(my.decl.with = "true"))
            abort "Disallowed value 'with' provided for axis '$(my.axis.name)'."
        endif

        my.value = "$(my.axis_with)"
    elsif (my.axis.value = "without")
        if (!defined(my.decl.without) | !(my.decl.without = "true"))
            abort "Disallowed value 'without' provided for axis '$(my.axis.name)'."
        endif

        my.value = "$(my.axis_without)"
    elsif (defined(my.decl.valued) & (my.decl.valued = "true"))
        if (defined(my.axis.value))
            my.value = "$(my.axis.value)"
        endif
    else
        abort "Unrecognized value '$(my.axis.value)' provided for axis '$(my.axis.name)'."
    endif

    return my.value
endfunction # get_job_axis_value

function get_job_axis_default(configuration, integration, decl, job)
    define my.config = get_job_axis_default.configuration
    define my.integration = get_job_axis_default.integration
    define my.decl = get_job_axis_default.decl
    define my.job = get_job_axis_default.job
    define my.result = ""

    if (count(my.integration.dependency, (count.name = my.decl.name) &\
        (count.os = my.job.system)) = 1)
        define my.dependency = my.integration->dependency((name = my.decl.name) & (os = my.job.system))

        if ((count(my.dependency.toolset, (count.name = "auto")) = 1))
            my.result = my.dependency->toolset(name = "auto").axis
        endif

        if ((count(my.dependency.toolset, (count.name = "cmake")) = 1) & defined(my.config.cmake))
            my.result = my.dependency->toolset(name = "cmake").axis
        endif
    endif

    return my.result
endfunction # get_job_axis_default

function get_job_shell_axis_value(configuration, integration, job, decl)
    define my.config = get_job_shell_axis_value.configuration
    define my.integration = get_job_shell_axis_value.integration
    define my.job =  get_job_shell_axis_value.job
    define my.decl =  get_job_shell_axis_value.decl
    define my.value = ""

    define my.declared = (count(my.job.axis, (count.name = my.decl.name)) = 1)
    define my.pathed = (count(my.integration.dependency, (count.name = my.decl.name) &\
        (count.os = my.job.system) & defined(count.path)) = 1)

    if (my.declared)
        my.value = get_job_axis_value(my.config, my.decl, my.job,\
          my.job->axis(name = my.decl.name))
    else
        my.value = get_job_axis_default(my.config, my.integration, my.decl, my.job)
    endif

    return my.value
endfunction # get_job_shell_axis_value

function get_job_coverage(job)
    define my.job = get_job_coverage.job
    define my.coverage = "nocov"

    if (defined(my.job.coverage) & !is_empty(my.job.coverage) &\
      (my.job.coverage = "true"))
        my.coverage = "cov"
    endif

    return my.coverage
endfunction # get_job_coverage

function get_job_cpuflag_detection(job)
    define my.job = get_job_cpuflag_detection.job
    define my.value = "ignore"

    if (defined(my.job.detectcpuflags) & !is_empty(my.job.detectcpuflags) &\
      (my.job.detectcpuflags = "true"))
        my.value = "detect"
    endif

    return my.value
endfunction # get_job_cpuflag_detection

function get_coverage_exclusions(ci)
    define my.ci = get_coverage_exclusions.ci

    # Exclude all system directories.
    define my.excludes = quote("/usr/*")

    # Exclude prefix directory (fixed in github actions ci)
    my.excludes += " $(quote("${{ env.LIBBITCOIN_SRC_PATH }}prefix/*"))"

    # Exclude build directory (fixed in github actions ci)
    # my.excludes += " $(quote("${{ github.workspace }}/build/*"))"

    # Exclude examples directory
    my.excludes += " $(quote("${{ github.workspace }}/examples/*"))"

    # Exclude test directory
    my.excludes += " $(quote("${{ github.workspace }}/test/*"))"

    # Exclude explicitly specified workspace relative paths
    if (defined(my.ci->coverage) & \
      (count(my.ci->coverage.exclude, !is_empty(count.path)) > 0))
        for my.ci->coverage.exclude as _exclude
            my.excludes += " $(quote("${{ github.workspace }}/" + _exclude.path))"
        endfor _exclude
    endif

    return my.excludes
endfunction # get_coverage_exclusions

function get_product_tests(product)
    define my.product = get_product_tests.product
    define my.tests = ""

    if defined(my.product)
        if defined(my.product->runner)
            for my.product->runner.run as _run
                my.tests = join(my.tests, _run.test, ",")
            endfor
        endif
    endif

    return my.tests
endfunction

function get_sln_tests(repository)
    define my.repository = get_sln_tests.repository

    define my.product = my.repository->make->product(\
        defined(_product->runner), _product)?

    define my.tests = get_product_tests(my.product)

    return is_empty(my.tests) ?? "*" ? "$(my.tests)"
endfunction # get_sln_tests

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro initialize_matrix_shell_entry(configuration, integration, repository, ci, job)
.   define my.config = initialize_matrix_shell_entry.configuration
.   define my.integration = initialize_matrix_shell_entry.integration
.   define my.repository = initialize_matrix_shell_entry.repository
.   define my.ci = initialize_matrix_shell_entry.ci
.   define my.job = initialize_matrix_shell_entry.job
.
.   if is_job_config(my.config, my.job)
          - os: $(get_job_os(my.job))
.       if (defined(my.config.use_preset))
            preset: "$(get_job_preset(my.job))"
.       endif
            cxx: "$(get_job_cxx(my.job))"
            link: "$(get_job_link(my.job))"
            optimization: "$(get_job_optimization(my.job))"
            assert: "$(get_job_assert(my.job))"
            coverage: "$(get_job_coverage(my.job))"
            detectcpuflags: "$(get_job_cpuflag_detection(my.job))"
.       for my.ci.axis by "$(name)" as _axis where !defined(_axis.silent)
            $(_axis.name): "$( get_job_shell_axis_value(my.config, my.integration, my.job, _axis))"
.       endfor
            cc: "$(get_job_cc(my.job))"
            flags: "$(get_job_cflags(my.integration, my.repository, my.job))"
            options: "$(get_job_options(my.job, my.config))"
            packager: "$(get_job_packager(my.job))"
            packages: "$(get_job_packages(my.integration, my.repository, my.job))"

.   endif
.endmacro # initialize_matrix_shell_entry
.
.macro initialize_matrix_shell(configuration, integration, repository, ci)
.   define my.config = initialize_matrix_shell.configuration
.   define my.integration = initialize_matrix_shell.integration
.   define my.repository = initialize_matrix_shell.repository
.   define my.ci = initialize_matrix_shell.ci
.
      matrix:
        include:
.
.   for my.ci.job by "$(system)-$(sort_compiler(_job))-$(link)" as _job where is_job_config(_config, _job)
.       initialize_matrix_shell_entry(my.config, my.integration, my.repository, my.ci, _job)
.   endfor _job
.endmacro # initialize_matrix_shell
.
.macro initialize_matrix_msbuild_entry(repository, ci, job)
.   define my.repository = initialize_matrix_msbuild_entry.repository
.   define my.ci = initialize_matrix_msbuild_entry.ci
.   define my.job = initialize_matrix_msbuild_entry.job
.
          - os: $(get_job_os(my.job))
            configuration: "$(get_job_windows_configuration(my.job))"
            platform: "$(get_job_windows_platform(my.job))"
            version: "vs2022"
            tests: "$(get_sln_tests(my.repository))"

.endmacro # initialize_matrix_msbuild_entry
.
.macro initialize_matrix_msbuild(repository, ci)
.   define my.repository = initialize_matrix_msbuild.repository
.   define my.ci = initialize_matrix_msbuild.ci
.
      matrix:
        include:
.
.   for my.ci.job by "$(system)-$(compiler)-$(link)" as _job where is_system_windows(_job)
.       initialize_matrix_msbuild_entry(my.repository, my.ci, _job)
.   endfor _job
.
.endmacro #initialize_matrix_msbuild
.
.macro emit_step_prepare_toolchain(configuration)
.   define my.config = emit_step_prepare_toolchain.configuration
.
      - name: Prepare toolchain [generic]
        run: |
          git config --global init.defaultBranch master

      - name: Prepare toolchain [apt]
        if: ${{ matrix.packager == 'apt' }}
        run: |
          sudo apt-get update
          sudo apt-get install git build-essential autoconf automake libtool pkg-config ${{ matrix.packages }}

      - name: Prepare toolchain [brew]
        if: ${{ matrix.packager == 'brew' }}
        run: |
          brew install autoconf automake libtool ${{ matrix.packages }}
          if [[ -n ${{ matrix.llvm }} ]]; then
              echo "PATH=/opt/homebrew/opt/${{ matrix.llvm }}/bin:$PATH" >> $GITHUB_ENV
          fi
.
.endmacro # emit_step_prepare_toolchain
.
.macro emit_step_cpuflag_determination(configuration, repository)
.   define my.config = emit_step_cpuflag_determination.configuration
.   define my.repository = emit_step_cpuflag_determination.repository
.
.   define my.sse41 = defined(my.config.cmake) ?? "-Denable-sse41=on" ? "--enable-sse41"
.   define my.avx2 = defined(my.config.cmake) ?? "-Denable-avx2=on" ? "--enable-avx2"
.   define my.avx512 = defined(my.config.cmake) ?? "-Denable-avx512=on" ? "--enable-avx512"
.   define my.shani = defined(my.config.cmake) ?? "-Denable-shani=on" ? "--enable-shani"
.
      - name: Determine CPU flags
        shell: bash
        run: |
          if [[ -n \$(cat /proc/cpuinfo | grep flags | grep " sse4_1 ") ]]; then
              echo "CPU_SUPPORT_SSE41=$(my.sse41)" >> $GITHUB_ENV
          fi

          if [[ -n \$(cat /proc/cpuinfo | grep flags | grep " avx " | grep " avx2 ") ]]; then
              echo "CPU_SUPPORT_AVX2=$(my.avx2)" >> $GITHUB_ENV
          fi

          if [[ -n \$(cat /proc/cpuinfo | grep flags | grep " avx512bw ") ]]; then
              echo "CPU_SUPPORT_AVX512=$(my.avx512)" >> $GITHUB_ENV
          fi

          if [[ -n \$(cat /proc/cpuinfo | grep flags | grep " sha_ni ") ]]; then
              echo "CPU_SUPPORT_SHANI=$(my.shani)" >> $GITHUB_ENV
          fi

          if [[ ${{ matrix.detectcpuflags }} == 'detect' ]]; then
              echo "CPU_SUPPORTED_FLAGS='$CPU_SUPPORT_SSE41 $CPU_SUPPORT_AVX2 $CPU_SUPPORT_AVX512 $CPU_SUPPORT_SHANI'" >> $GITHUB_ENV
          fi
.endmacro # emit_step_cpuflag_determination
.
.macro emit_step_display_environment(configuration, repository)
.   define my.config = emit_step_display_environment.configuration
.   define my.repository = emit_step_display_environment.repository
.
      - name: Display Compiler details
        shell: bash
        run: |
          ${CC} -v
          ${CXX} -v

      - name: Display CPU details
        if: ${{ (runner.os == 'Linux') }}
        shell: bash
        run: |
          lscpu
.endmacro # emit_step_display_environment
.
.macro emit_step_parameter_denormalization(configuration, repository)
.   define my.config = emit_step_parameter_denormalization.configuration
.   define my.repository = emit_step_parameter_denormalization.repository
.
      - name: Denormalize parameterization
        shell: bash
        run: |
          WORKSPACE_SUBPATH="${GITHUB_WORKSPACE%$(my.repository.name)}"
          echo "LIBBITCOIN_SRC_PATH=${WORKSPACE_SUBPATH}" >> $GITHUB_ENV
.   # cmake library path
.   if defined(my.config.cmake)
          if [[ ${{ matrix.packager }} == 'brew' ]]; then
            echo "CMAKE_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
          fi
.   endif
.   # assert (ndebug)
          if [[ ${{ matrix.assert }} == 'ndebug' ]]; then
.   if defined(my.config.cmake)
            echo "ASSERT_NDEBUG=--enable-ndebug -Denable-ndebug=yes" >> $GITHUB_ENV
          else
            echo "ASSERT_NDEBUG=--disable-ndebug -Denable-ndebug=no" >> $GITHUB_ENV
.   else
            echo "ASSERT_NDEBUG=--enable-ndebug" >> $GITHUB_ENV
          else
            echo "ASSERT_NDEBUG=--disable-ndebug" >> $GITHUB_ENV
.   endif
          fi
.   # link
          if [[ ${{ matrix.link }} == 'dynamic' ]]; then
            echo "LINKAGE=--disable-static" >> $GITHUB_ENV
          else
            echo "LINKAGE=--disable-shared" >> $GITHUB_ENV
          fi
.#   # compiler flags
.#          if [[ ${{ matrix.optimization }} == 'debug' ]]; then
.#            echo "CFLAGS='${{ env.CFLAGS }} -Og'" >> $GITHUB_ENV
.#            echo "CXXFLAGS='${{ env.CXXFLAGS }} -Og'" >> $GITHUB_ENV
.#          else if [[ ${{ matrix.optimization }} == 'size' ]]; then
.#            echo "CFLAGS='${{ env.CFLAGS }} -Os'" >> $GITHUB_ENV
.#            echo "CXXFLAGS='${{ env.CXXFLAGS }} -Os'" >> $GITHUB_ENV
.#          fi
.#          if [[ ${{ matrix.coverage }} == 'true' ]]; then
.#            echo "CFLAGS='${{ env.CFLAGS }} -g --coverage" >> $GITHUB_ENV
.#            echo "CXXFLAGS='${{ env.CXXFLAGS }} -g --coverage" >> $GITHUB_ENV
.#          fi
.   # linker flags
          if [[ ${{ matrix.link }} == 'dynamic' ]]; then
.   if (defined(my.config.use_preset))
            echo "LDFLAGS=-Wl,-rpath,${WORKSPACE_SUBPATH}prefix/${{ matrix.preset }}/lib" >> $GITHUB_ENV
.   else
            echo "LDFLAGS=-Wl,-rpath,${WORKSPACE_SUBPATH}prefix/lib" >> $GITHUB_ENV
.   endif
          fi
.
.endmacro # emit_step_parameter_denormalization
.
.macro emit_step_execute_shell(configuration, ci)
.   define my.config = emit_step_execute_shell.configuration
.   define my.ci = emit_step_execute_shell.ci
.   define my.suffix = defined(my.config.suffix) ?? "-$(my.config.suffix).sh" ? ".sh"
      - name: Execute install$(my.suffix)
        run: >
          ./install$(my.suffix)
          --build-dir=${{ env.LIBBITCOIN_SRC_PATH }} ${{ matrix.options }}
.   if (defined(my.config.use_preset))
          --prefix=${{ env.LIBBITCOIN_SRC_PATH }}prefix/${{ matrix.preset }}
          --preset=${{ matrix.preset }}
.   else
          --prefix=${{ env.LIBBITCOIN_SRC_PATH }}prefix
.   endif
          ${{ env.LINKAGE }}
          ${{ env.ASSERT_NDEBUG }}
          ${{ env.CPU_SUPPORTED_FLAGS }}
.       for my.ci.axis as _axis where (defined(_axis.param) & (_axis.param = "true"))
          ${{ matrix.$(_axis.name) }}
.       endfor
.endmacro # emit_step_execute_shell
.
.macro emit_step_calculate_coverage(configuration, ci)
.   define my.config = emit_step_calculate_coverage.configuration
.   define my.ci = emit_step_calculate_coverage.ci
.   define my.exclusions = get_coverage_exclusions(my.ci)
.
      - name: Coveralls Calculation
        if: ${{ matrix.coverage == 'cov' }}
        run: |
          lcov --ignore-errors version,gcov,mismatch --directory . --capture --output-file coverage.info
          lcov --ignore-errors unused --remove coverage.info $(my.exclusions) --output-file coverage.info
          lcov --list coverage.info

      - name: Coveralls.io Upload
        if: ${{ matrix.coverage == 'cov' }}
        uses: coverallsapp/github-action@v2.3.0
        with:
          format: lcov
          files: "./coverage.info"
          github-token: ${{ secrets.github_token }}
.
.endmacro # emit_step_calculate_coverage
.
.macro emit_step_failure_output(configuration)
.   define my.config = emit_step_failure_output.configuration
.
      - name: Failure display available binaries
        if: ${{ failure() }}
        run: |
          ls -la /usr/bin

      - name: Failure display selected compiler version
        if: ${{ failure() }}
        run: |
          ${CC} -v
          ${CXX} -v

      - name: Failure display default compiler version
        if: ${{ failure() }}
        run: |
          clang -v
          gcc -v

      - name: Failure display env
        if: ${{ failure() }}
        run: |
          env

      - name: Failure list libdir
        if: ${{ failure() }}
        run: |
          ls -la ${{ env.LIBBITCOIN_SRC_PATH }}prefix/lib

      - name: Failure display boost bootstrap.log [--build-boost]
        if: ${{ failure() && (matrix.boost == '--build-boost') }}
        run: |
          cat ${{ github.workspace }}/build/build-*/bootstrap.log


      - name: Failure display otool output
        if: ${{ failure() && startsWith(matrix.os, 'macos') }}
        run: |
          otool -L ${{ github.workspace }}/test/.libs/$(_repository.name)-test

      - name: Failure display DYLD_PRINT_LIBRARIES
        if: ${{ failure() && startsWith(matrix.os, 'macos') }}
        run: |
          DYLD_PRINT_LIBRARIES=1 ${{ github.workspace }}/test/.libs/$(_repository.name)-test

      - name: Failure display pkgconfig
        if: ${{ failure() }}
        run: |
          ls ${{ env.LIBBITCOIN_SRC_PATH }}prefix/lib/pkgconfig/
          cat ${{ env.LIBBITCOIN_SRC_PATH }}prefix/lib/pkgconfig/*.pc
.
.   if (defined(my.config.cmake))

      - name: Failure display cmake specific libraries
        if: ${{ failure() }}
        run: |
          ls ${{ env.LIBBITCOIN_SRC_PATH }}prefix/lib/cmake

      - name: Failure display cmake LastTest.log
        if: ${{ failure() }}
        run: |
          cat ${{ github.workspace }}/Testing/Temporary/LastTest.log
.   endif
.
.endmacro # emit_step_failure_output
.
.macro emit_job_shell(configuration, integration, repository, ci)
.   define my.config = emit_job_shell.configuration
.   define my.integration = emit_job_shell.integration
.   define my.repository = emit_job_shell.repository
.   define my.ci = emit_job_shell.ci
.
  $(my.config.job):

    strategy:
      fail-fast: false

.   initialize_matrix_shell(my.config, my.integration, my.repository, my.ci)

    runs-on: ${{ matrix.os }}

    env:
      CC: '${{ matrix.cc }}'
      CXX: '${{ matrix.cxx }}'
      CFLAGS: '${{ matrix.flags }}'
      CXXFLAGS: '${{ matrix.flags }}'
      CI_REPOSITORY: '${{ github.repository }}'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

.   emit_step_prepare_toolchain(my.config)

.   emit_step_cpuflag_determination(my.config, my.repository)

.   emit_step_parameter_denormalization(my.config, my.repository)

.   emit_step_display_environment(my.config, my.repository)

.   emit_step_execute_shell(_config, my.ci)

.   emit_step_calculate_coverage(_config, my.ci)

.   emit_step_failure_output(_config)
.
.endmacro # emit_job_shell
.
.macro emit_job_msbuild(repository, ci)
.   define my.repository = emit_job_msbuild.repository
.   define my.ci = emit_job_msbuild.ci
.
  msbuild:
    strategy:
      fail-fast: false

.   initialize_matrix_msbuild(my.repository, my.ci)
.
    runs-on: ${{ matrix.os }}

    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize SDK
        shell: powershell
        run: |
          try {
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=323507" -OutFile "sdksetup.exe"

            $FeatureList = "OptionId.WindowsDesktopSoftwareDevelopmentKit OptionId.NetFxSoftwareDevelopmentKit"
            $Args = "/q /norestart /features $FeatureList"
            $setup = Start-Process -PassThru -FilePath "sdksetup.exe" -ArgumentList $Args

            $setup.WaitForExit()
            if ($setup.ExitCode -ne 0) {
              Write-Host "Test execution failure: " $setup.ExitCode -ForegroundColor Red;
              exit $setup.ExitCode;
            }
          }
          catch {
            $ERR = $_;
            Write-Host "Initialization failure: " $ERR -ForegroundColor Red;
            exit $ERR;
          }

      - name: Execute build
        run: .\\build.cmd .. ${{ matrix.platform }} ${{ matrix.configuration }} x64 ${{ matrix.version }}

      - name: Execute tests
        shell: powershell
        run: |
          Write-Host "Locating test executables..." -ForegroundColor Yellow;
          $BC_TEST_EXES = @(Get-ChildItem -Path "$env:${{ github.workspace }}\\bin" -recurse | Where-Object { $_.Name -eq "$(my.repository.name)-test.exe" });
          If ($BC_TEST_EXES.Count -ne 1) {
            Write-Host "Failure, invalid count of test executables." -ForegroundColor Red;
            exit 1;
          }
          Write-Host "Found single test executable: " $BC_TEST_EXES.FullName -ForegroundColor Green;
          $BC_TEST_SINGLETON = $BC_TEST_EXES.FullName;
          Write-Host "Executing $BC_TEST_SINGLETON $env:BOOST_UNIT_TEST_OPTIONS" -ForegroundColor Yellow;
          try {
            Invoke-Expression "$BC_TEST_SINGLETON --log_level=warning --run_test=${{ matrix.tests }} $env:BOOST_UNIT_TEST_OPTIONS"
          }
          catch {
            $ERR = $_;
            Write-Host "Test execution failure: " $ERR -ForegroundColor Red;
            exit $ERR;
          }
          Write-Host "Test execution complete." -ForegroundColor Green;
.endmacro # emit_job_msbuild
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
.endtemplate
.template 1
.macro generate_ci_yml(path_prefix)
.define my.integration = generate->integration
.if (!defined(my.integration))
.   abort "FATAL no integration."
.endif
.for generate.repository by name as _repository
.   require(_repository, "repository", "name")
.   if (defined(_repository->ci))
.       my.absolute_path = join(join(global.root, my.path_prefix), _repository.name)
.       my.output_path = workflow_relative_path(_repository, my.path_prefix)
.       create_directory(my.output_path)
.       define my.out_file = "$(my.output_path)/ci.yml"
.       notify(my.out_file)
.       output(my.out_file)
.       copyleft(_repository.name)
.       define my.ci = _repository->ci

name: Continuous Integration Build

on: [ pull_request, push, workflow_dispatch ]

jobs:
.       if (has_jobs_autotools(my.ci))
.           new configuration as _config
.               _config.job = "autotools"
.               _config.accept_all = "true"
.               _config.auto = "true"
.               emit_job_shell(_config, my.integration, _repository, my.ci)
.           endnew _config
.       endif
.
.       if (has_jobs_autotools(my.ci) & has_jobs_cmake(my.ci))
.           write_line("")
.       endif
.
.       if (has_jobs_cmake(my.ci))
.           new configuration as _config
.               _config.job = "cmake"
.               _config.accept_all = "true"
.               _config.cmake = "true"
.               _config.suffix = "cmake"
.               emit_job_shell(_config, my.integration, _repository, my.ci)
.           endnew _config
.       endif
.
.       if ((has_jobs_autotools(my.ci) | has_jobs_cmake(my.ci)) & has_jobs_presets(my.ci))
.           write_line("")
.       endif
.
.       if (has_jobs_presets(my.ci))
.           new configuration as _config
.               _config.job = "preset"
.               _config.accept_all = "true"
.               _config.job_require = "preset"
.               _config.cmake = "true"
.               _config.use_preset = "true"
.               _config.suffix = "cmakepresets"
.               emit_job_shell(_config, my.integration, _repository, my.ci)
.           endnew _config
.       endif
.
.       if ((has_jobs_autotools(my.ci) | has_jobs_cmake(my.ci) | has_jobs_presets(my.ci)) & has_jobs_msbuild(my.ci))
.           write_line("")
.       endif
.
.       if (has_jobs_msbuild(my.ci))
.         emit_job_msbuild(_repository, my.ci)
.       endif
.
.       close
.   endif
.endfor _repository
.endmacro # generate_ci_yml
.endtemplate
.template 0
###############################################################################
# Execution
###############################################################################
[global].root = ".."
[global].trace = 0
[gsl].ignorecase = 0

# Note: expected context root libbitcoin-build directory
gsl from "library/math.gsl"
gsl from "library/string.gsl"
gsl from "library/collections.gsl"
gsl from "utilities.gsl"

generate_ci_yml("output")

.endtemplate
