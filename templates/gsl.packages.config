.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin Makefile.am.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

###
### packages.config related string generators
###
function project_base(product, repository_name)
    define my.product = project_base.product
    require(my.product, "product", "prefix")

    if (is_library(my.product))
        return "$(my.repository_name)"
    elsif (is_program(my.product))
        if (defined(my.product.option))
            if (defined(my.product.msvc_name))
                return "$(my.product.msvc_name)"
            else
                return "$(my.repository_name)-$(my.product.option)"
            endif
        else
            require(my.product, "product", "option")
        endif
    else
        abort("Unrecognized product prefix: $(my.product.prefix)")
    endif
endfunction

function project_build_dir_relative_path(product, repository_name, subpath)
    define my.product = project_build_dir_relative_path.product
    define my.proj_name = project_base(my.product, my.repository_name)
    return append_path(\
        append_path(my.repository_name, my.subpath), my.proj_name)
endfunction

function packages_config_file(product, repository_name, subpath)
    define my.product = packages_config_file.product
    define my.proj_relative_path = project_build_dir_relative_path(my.product,\
        my.repository_name, my.subpath)
    return append_path(my.proj_relative_path, "packages.config")
endfunction

###
### generic assistance functions
###
function get_nuget_entry(nuget_registry, name)
    define my.nuget_registry = get_nuget_entry.nuget_registry
    return my.nuget_registry->nuget(_nuget.build_name = my.name, _nuget)
endfunction

###
### functional artifact emission
###
function emit_packages(nuget_registry, repository, product)
    define my.nuget_registry = emit_packages.nuget_registry
    define my.repository = emit_packages.repository
    require(my.repository, "repository", "name")
    define my.product = emit_packages.product
    require(my.product, "product", "path")
    require(my.product, "product", "prefix")
    require(my.product, "product", "uuid")

    for my.repository->install.build as _build where defined(_build.nuget) &\
        (_build.nuget = "true")

        define nuget_entry = get_nuget_entry(my.nuget_registry, _build.name)
        for nuget_entry.package as _package
            require(_package, "package", "label")
            require(_package, "package", "name")
            require(_package, "package", "version")

            if (!(_package.label = "test") |\
                ((_package.label = "test") & is_true(my.product.test)))
                emit_package_item(_package)
            endif

        endfor
    endfor
endfunction

function emit_packages_config(nuget_registry, repository, product)
    define my.nuget_registry = emit_packages_config.nuget_registry
    define my.repository = emit_packages_config.repository
    require(my.repository, "repository", "name")
    define my.product = emit_packages_config.product
    require(my.product, "product", "path")
    require(my.product, "product", "prefix")
    require(my.product, "product", "uuid")

    emit_xml_declaration()
    xml_copyleft(my.repository.name)
    emit_packages_open()
    emit_packages(my.nuget_registry, my.repository, my.product)
    emit_packages_close()
endfunction emit_project

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro emit_xml_declaration()
<?xml version="1.0" encoding="utf-8"?>
.endmacro emit_xml_declaration
.
.macro emit_packages_open()
<packages>
.endmacro emit_packages_open
.
.macro emit_packages_close()
</packages>
.endmacro emit_packages_close
.
.macro emit_package_item(package)
.   define my.package = emit_package_item.package
.   require(my.package, "package", "name")
.   require(my.package, "package", "version")
  <package id="$(my.package.name)" version="$(my.package.version)" targetFramework="Native" />
.endmacro emit_package_item
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
function generate_packages_config(generate, subpath)
    define my.generate = generate_packages_config.generate
    for my.generate.repository as _repository by _repository.name\
        where defined(_repository->make)

        require(_repository, "repository", "name")
        define my.absolute_proj_path = "$(global.root)/$(_repository.name)"
        define my.nuget_registry = generate->nuget_registry

        for _repository->make.product as _product where \
            (defined(_product.uuid) & defined(_product.path))

            define my.proj_dir_name = project_build_dir_relative_path(\
                _product, _repository.name, my.subpath)

            define my.file = packages_config_file(_product, _repository.name,\
                my.subpath)

            create_directory(my.proj_dir_name)
            notify(my.file)
            output(my.file)

            emit_packages_config(my.nuget_registry, _repository, _product)

            close
        endfor
    endfor _repository
endfunction # generate_packages_config
.endtemplate
