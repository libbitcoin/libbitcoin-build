.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin configure.ac.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

function format_template_files(configure)
    define my.configure = format_template_files.configure
    define my.template_files = ""
    for my.configure.template as _template
        require(_template, "template", "name")
        my.template_files += " $(_template.name)"
    endfor _template
    return trim_left(my.template_files)
endfunction

function find_flag_name(configure, name)
    define my.configure = find_flag_name.configure
    define my.found = my.configure->flag(flag.name = my.name)?
    return defined(my.found)
endfunction

function find_flag_name(configure, value)
    define my.configure = find_flag_name.configure
    define my.found = my.configure->flag(flag.name = my.value)?
    return defined(my.found)
endfunction

# Return PREPROC|COMPILE|LINK
function get_flags_check(flag)
    define my.flag = get_flags_check.flag
    if (is_cpp_flag(my.flag))
        return "PREPROC"
    elsif (is_ccc_flag(my.flag) | is_cxx_flag(my.flag))
        # Is this intended to be both C and C++?
        return "COMPILE"
    elsif (is_link_flag(my.flag))
        return "LINK"
    endif
    define my.context = my.flag.context ? ""
    abort "Invalid flag context: '$(my.context)'."
endfunction

function get_option_type(option)
    define my.option = get_option_type.option
    require(my.option, "option", "type")
    if (my.option.type = "enable" | my.option.type = "with")
        return my.option.type
    endif
    abort "Invalid repository.option.type: $(my.option.type)."
endfunction

function get_option_default(option)
    define my.option = get_option_default.option
    return defined(my.option.default) ??\
        " @<:@default=$(my.option.default)@:>@" ? ""
endfunction

# For some reason all-am requires we make the pc file, so for now we always
# define at least an empty package element.
function get_package_files(repository)
    define my.repository = get_package_files.repository
    define my.make = my.repository->make
    define my.packages = ""
    for my.repository.package as _package where defined(_package.library)
        define my.product = find_library_product(_package.library, my.make)?
        #if (defined(my.product))
            # TODO: define package name conditionally in configure.ac.
            #if (is_optional_element(my.product))
            #    abort "Conditional pkg-config not yet supported: $(_package.library)"
            #endif
            define my.package = get_package_name(_package)
            my.packages += " $(my.package).pc"
        #endif
    endfor
    return my.packages
endfunction

function render_define_item(item)
    define my.define = render_define_item.item
    if defined(my.define.name)
        render_define(my.define)
    elsif (defined(my.define.export))
        render_define_export(my.define)
    else
        render_define_header(my.define)
    endif
endfunction

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.#-----------------------------------------------------------------------------
.# Initialize
.#-----------------------------------------------------------------------------
.macro initialize_configure(repository)
.   define my.repository = initialize_configure.repository
.   require(my.repository, "repository", "email")
.   require(my.repository, "repository", "name")
.   require(my.repository, "repository", "version")
.
# Requires Automake 1.14 or newer.

# Declare the required version of Autoconf.
AC_PREREQ([2.65])

# Process command-line arguments and perform initialization and verification.
AC_INIT([$(my.repository.name)], [$(my.repository.version)], [$(my.repository.email)])

# Do compilation tests.
AC_LANG(C++)

# Specify the temporary directory for build tools.
AC_CONFIG_AUX_DIR([build-aux])

# Specify the directory of additional local Autoconf macros.
AC_CONFIG_MACRO_DIR([m4])

# Run macros for operation of generated Makefiles, enable non-recursive make.
# Unless [foreign] is specified standard GNU files will be required,
# specifically: AUTHORS, COPYING, INSTALL, NEWS, README and ChangeLog.
AM_INIT_AUTOMAKE([subdir-objects])

# Enable C and POSIX extensions that may be disabled on certain platforms.
AC_USE_SYSTEM_EXTENSIONS

# Enable the archiver.
AM_PROG_AR

# Initialize libtool.
LT_INIT

# Determine C++ compiler to use.
AC_PROG_CXX

# Enable shared libraries if available, and static if they don't conflict.
AC_PROG_LIBTOOL

# Compute the canonical host-system type variable host, including host_os.
AC_CANONICAL_HOST

# Enable silent rules option.
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Check for pkg-config.
PKG_PROG_PKG_CONFIG

.heading2("Declare environment variables that affect the build.")
AC_ARG_VAR([CC], "C compiler to use, such as gcc or clang")
AC_ARG_VAR([CXX], "C++ compiler to use, such as g++ or clang++")
AC_ARG_VAR([PKG_CONFIG_PATH], "Additional directories for package discovery.")

.endmacro
.
.#-----------------------------------------------------------------------------
.# AX_CXX_COMPILE_STDCXX_11
.#-----------------------------------------------------------------------------
.macro require_stdcxx11(repository)
.   define my.repository = require_stdcxx11.repository
.   if (find_flag_name(my.repository->configure, "std=c++11"))
.heading2("Check for baseline language coverage in the compiler for the C++11 standard.")
AX_CXX_COMPILE_STDCXX_11([noext], [mandatory])

.   endif
.endmacro
.
.#-----------------------------------------------------------------------------
.# AC_ARG_ENABLE | AC_ARG_WITH
.#-----------------------------------------------------------------------------
.macro render_option(option)
.   define my.option = render_option.option
.   require(my.option, "option", "description")
.   require(my.option, "option", "name")
.   require(my.option, "option", "type")
.
.   define my.example = my.option.example ? ""
.   define my.type = get_option_type(my.option)
.   define my.symbol = get_option_symbol(my.option)
.   define my.default = get_option_default(my.option)
.
.   define my.implement = is_true(inherited) ?? "Inherit" ? "Implement"
.   define my.output = is_true(my.option.substitute) ?? " and output ${$(my.option.name:c)}" ? ""
.   define my.defines = defined(my.option.define) ?? " and define $(my.option.define:upper,c)" ? ""
.   define my.conditional = is_true(my.option.conditional) ?? " and declare $(my.symbol:upper)" ? ""
.   heading2("$(my.implement) --$(my.type)-$(my.option.name)$(my.defines)$(my.output)$(my.conditional).")
.
.   if (!is_true(my.option.inherited))
AC_MSG_CHECKING([--$(my.type)-$(my.option.name) option])
AC_ARG_$(my.type:upper)([$(my.option.name)],
    AS_HELP_STRING([--$(my.type)-$(my.option.name)$(my.example)],
        [$(my.option.description)$(my.default)]),
    [$(my.symbol)=$$(my.type)val],
    [$(my.symbol)=$(my.option.default)])
AC_MSG_RESULT([$$(my.symbol)])
.   endif
.
.   if (!is_empty(my.option.define))
AS_CASE([${$(my.symbol)}], [yes], AC_DEFINE([$(my.option.define:upper,c)]))
.   endif
.
.   if (is_true(my.option.substitute) & defined(my.option.value))
AS_CASE([${$(my.symbol)}], [yes], AC_SUBST([$(my.option.name:c)], [$(my.option.value)]))
.   elsif (is_true(my.option.substitute))
AC_SUBST([$(my.symbol)])
.   endif
.
.   if (is_true(my.option.conditional))
AM_CONDITIONAL([$(my.symbol:upper)], [test x$$(my.symbol) != xno])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AC_DEFINE
.#-----------------------------------------------------------------------------
.macro render_define(item)
.   define my.define = render_define.item
.   require(my.define, "define", "name")
.   define my.uname = "$(my.define.name:upper,c)"
.   heading2("Unconditionally define the preprocessor symbol $(my.uname).")
.   if (!is_empty(my.define.comment))
.       heading3(my.define.comment)
.   endif
.
.   if (defined(my.define.value))
AC_DEFINE([$(my.uname)], [$(my.define.value)])
.   else
AC_DEFINE([$(my.uname)])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AC_CHECK_HEADERS
.#-----------------------------------------------------------------------------
.macro render_define_header(item)
.   define my.define = render_define_header.item
.   require(my.define, "define", "header")
.   define my.symbol = "HAVE_$(my.define.header:upper,c)"
.   heading2("Conditionally define the preprocessor symbol $(my.symbol).")
AC_CHECK_HEADERS([$(my.define.header)])

.endmacro
.
.#-----------------------------------------------------------------------------
.# AC_CHECK_DECLS
.#-----------------------------------------------------------------------------
.macro render_define_export(item)
.   define my.define = render_define_export.item
.   require(my.define, "define", "header")
.   require(my.define, "define", "export")
.   define my.header_symbol = "HAVE_$(my.define.header:upper,c)"
.   define my.export_symbol = "HAVE_DECL_$(my.define.export:upper,c)"
.   heading2("Conditionally define the preprocessor symbol $(my.export_symbol).")
AC_CHECK_HEADERS([$(my.define.header)],
    [AC_CHECK_DECLS([$(my.define.export)], [], [],
        [#if $(my.header_symbol)
         #include <$(my.define.header)>
         #endif])])

.endmacro
.
.#-----------------------------------------------------------------------------
.# AX_JAVA_DEVEL
.#-----------------------------------------------------------------------------
.macro check_java(dependency, configure)
.   define my.dependency = check_java.dependency
.   define my.configure = check_java.configure
.   require(my.dependency, "dependency", "name")
.
.   define my.name = my.dependency.name
.   define my.cname = "$(my.name:c)"
.   define my.symbol = find_option_symbol(my.dependency, my.configure)?
.   define my.show_option = !is_empty(my.symbol) ?? " if --$(my.symbol)" ? ""
.   heading2("Require $(my.name)$(my.show_option) and output ${JAR/JAVAC/javadir} and ${$(my.cname)_CPPFLAGS}.")
.   if (!is_empty(my.dependency.comment))
.       heading3("$(my.dependency.comment)")
.   endif
.   if (is_empty(my.symbol))
AX_JAVA_DEVEL
AC_SUBST([$(my.cname)_CPPFLAGS], [${JAVA_CPPFLAGS}])
AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])
.   else
AS_CASE([${$(my.symbol)}], [yes],
    [AX_JAVA_DEVEL
     AC_SUBST([$(my.cname)_CPPFLAGS], [${JAVA_CPPFLAGS}])
     AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AX_PYTHON_DEVEL
.#-----------------------------------------------------------------------------
.macro check_python(dependency, configure)
.   define my.dependency = check_python.dependency
.   define my.configure = check_python.configure
.   require(my.dependency, "dependency", "name")
.
.   define my.name = my.dependency.name
.   define my.cname = "$(my.name:c)"
.   define my.version = my.dependency.version
.   define my.symbol = find_option_symbol(my.dependency, my.configure)?
.   define my.show_option = !is_empty(my.symbol) ?? " if --$(my.symbol)" ? ""
.   heading2("Require $(my.name) of at least version $(my.version)$(my.show_option) and output ${$(my.cname)_CPPFLAGS}.")
.   if (!is_empty(my.dependency.comment))
.       heading3("$(my.dependency.comment)")
.   endif
.   if (is_empty(my.symbol))
AM_PATH_PYTHON([$(my.version)],
    [AX_PYTHON_DEVEL
     AC_SUBST([$(my.cname)_CPPFLAGS], [${PYTHON_CPPFLAGS}])
     AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])])
.   else
AS_CASE([${$(my.symbol)}], [yes],
    [AM_PATH_PYTHON([$(my.version)],
        [AX_PYTHON_DEVEL
         AC_SUBST([$(my.cname)_CPPFLAGS], [${PYTHON_CPPFLAGS}])
         AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])])])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AM_ICONV
.#-----------------------------------------------------------------------------
.macro check_iconv(dependency, configure)
.   define my.dependency = check_iconv.dependency
.   define my.configure = check_iconv.configure
.   require(my.dependency, "dependency", "name")
.
.   define my.name = my.dependency.name
.   define my.cname = "$(my.name:c)"
.   define my.symbol = find_option_symbol(my.dependency, my.configure)?
.   define my.show_option = !is_empty(my.symbol) ?? " if --$(my.symbol)" ? ""
.   heading2("Require $(my.name)$(my.show_option) and output ${$(my.cname)_CPPFLAGS/LIBS}.")
.   if (!is_empty(my.dependency.comment))
.       heading3("$(my.dependency.comment)")
.   endif
.   if (is_empty(my.symbol))
AM_ICONV
AC_SUBST([iconv_CPPFLAGS], [${INCICONV}])
AC_SUBST([iconv_LIBS], [${LIBICONV}])
AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])
AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}])
.   else
AS_CASE([${$(my.symbol)}], [yes],
    AM_ICONV
    AC_SUBST([iconv_CPPFLAGS], [${INCICONV}])
    AC_SUBST([iconv_LIBS], [${LIBICONV}])
    AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])
    AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}]))
.   endif

.endmacro # check_iconv
.
.#-----------------------------------------------------------------------------
.# AX_PTHREAD
.#-----------------------------------------------------------------------------
.# This could be more general than pthread.
.macro check_pthread(dependency, configure)
.   define my.dependency = check_pthread.dependency
.   define my.configure = check_pthread.configure
.   require(my.dependency, "dependency", "name")
.
.   define my.cname = "$(my.dependency.name:c)"
.   define my.uname = "$(my.cname:upper)"
.   define my.symbol = find_option_symbol(my.dependency, my.configure)?
.   define my.show_option = !is_empty(my.symbol) ?? " if --$(my.symbol)" ? ""
.   heading2("Require $(my.cname)$(my.show_option) and output ${$(my.cname)_CPPFLAGS/LIBS}.")
.   if (!is_empty(my.dependency.comment))
.       heading3("$(my.dependency.comment)")
.   endif
.   if (is_empty(my.symbol))
AX_$(my.uname)(
    [AC_SUBST([$(my.cname)_CPPFLAGS], [${$(my.uname)_CPPFLAGS}])
     AC_SUBST([$(my.cname)_LIBS], [${$(my.uname)_LIBS}])
     AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])
     AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}])],
    [AC_MSG_ERROR([$(my.cname) library is required but was not found.])])
.   else
AS_CASE([${$(my.symbol)}], [yes],
    [AX_$(my.uname)(
        [AC_SUBST([$(my.cname)_CPPFLAGS], [${$(my.uname)_CPPFLAGS}])
         AC_SUBST([$(my.cname)_LIBS], [${$(my.uname)_LIBS}])
         AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])
         AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}]),
        [AC_MSG_ERROR([$(my.cname) library is required but was not found.])])],
    [AC_SUBST([$(my.cname)_LIBS], [])])
.   endif
.   if (my.cname = "pthread")
# Hard wired -lpthread because AX_PTHREAD does not do it.
AC_SUBST([pthread_LIBS], [-lpthread])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AC_CHECK_LIB
.#-----------------------------------------------------------------------------
.macro check_dependency(dependency)
.   define my.dependency = check_dependency.dependency
.   require(my.dependency, "dependency", "name")
.
.   define my.name = my.dependency.name
.   define my.cname = "$(my.name:c)"
.   define my.show_system = is_empty(my.dependency.system) ?? "" ? " if on $(my.dependency.system)"
.   define my.output = is_empty(my.dependency.function) ?? "" ? " and output ${$(my.cname)_LIBS}"
.   define my.system_pattern = is_empty(my.dependency.system) ?? "*" ? "*$(my.dependency.system)*"
.   heading2("Require $(my.name)$(my.show_system)$(my.output).")
.   if (!is_empty(my.dependency.comment))
.       heading3("$(my.dependency.comment)")
.   endif
.
.   if (!is_empty(my.dependency.function))
AS_CASE([${host_os}], [$(my.system_pattern)],
    [AC_CHECK_LIB([$(my.cname)], [$(my.dependency.function)],
        [AC_SUBST([$(my.cname)_LIBS], [-l$(my.cname)])
         AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}])],
        [AC_MSG_ERROR([$(my.cname) library is required but was not found.])])],
    [AC_SUBST([$(my.cname)_LIBS], [])])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AX_BOOST_BASE
.#-----------------------------------------------------------------------------
.macro check_boost(dependency)
.   define my.dependency = check_boost.dependency
.   require(my.dependency, "dependency", "version")
.
.   define my.version = my.dependency.version
.   define my.compiler = my.dependency.compiler?
.   define my.show_compiler = is_empty(my.compiler) ?? "" ? " if in $(my.compiler)"
.   define my.compiler_pattern = is_empty(my.compiler) ?? "*" ? "*$(my.compiler)*"
.   heading2("Require Boost of at least version $(my.version)$(my.show_compiler) and output ${boost_CPPFLAGS/LDFLAGS}.")
.   if (!is_empty(my.dependency.comment))
.       heading3("$(my.dependency.comment)")
.   endif
AS_CASE([${CC}], [$(my.compiler_pattern)],
    [AX_BOOST_BASE([$(my.version)],
        [AC_SUBST([boost_CPPFLAGS], [${BOOST_CPPFLAGS}])
         AC_SUBST([boost_LDFLAGS], [${BOOST_LDFLAGS}])
         AC_MSG_NOTICE([boost_CPPFLAGS : ${boost_CPPFLAGS}])
         AC_MSG_NOTICE([boost_LDFLAGS : ${boost_LDFLAGS}])],
        [AC_MSG_ERROR([Boost $(my.version) or later is required but was not found.])])])

.endmacro
.
.#-----------------------------------------------------------------------------
.# AX_BOOST_XXX
.#-----------------------------------------------------------------------------
.macro check_boost_lib(dependency, configure)
.   define my.dependency = check_boost_lib.dependency
.   define my.configure = check_boost_lib.configure
.   require(my.dependency, "dependency", "name")
.
.   define my.symbol = find_option_symbol(my.dependency, my.configure)?
.   define my.cname = "$(my.dependency.name:c)"
.   define my.uname = "$(my.cname:upper)"
.   if (!is_empty(my.dependency.comment))
.       heading3("$(my.dependency.comment)")
.   endif
.
.   if (is_empty(my.symbol))
AX_$(my.uname)
AC_SUBST([$(my.cname)_LIBS], [${$(my.uname)_LIB}])
AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}])
.   else
AS_CASE([${$(my.symbol)}], [yes],
    [AX_$(my.uname)
     AC_SUBST([$(my.cname)_LIBS], [${$(my.uname)_LIB}])
     AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}])],
    [AC_SUBST([$(my.cname)_LIBS], [])])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# PKG_CHECK_MODULES
.#-----------------------------------------------------------------------------
.macro check_package(dependency, configure)
.   define my.dependency = check_package.dependency
.   define my.configure = check_package.configure
.   require(my.dependency, "dependency", "name")
.   require(my.dependency, "dependency", "version")
.
.   define my.name = my.dependency.name
.   define my.cname = "$(my.dependency.name:c)"
.   define my.version = my.dependency.version
.   define my.default = my.dependency.default ? ""
.   define my.prefix = is_true(my.dependency.unprefixed) ?? "" ? "lib"
.   define my.symbol = find_option_symbol(my.dependency, my.configure)?
.   define my.check = "$(my.prefix)$(my.name) >= $(my.version)"
.   heading2("Require $(my.name) of at least version $(my.version) and output ${$(my.cname)_CPPFLAGS/LIBS/PKG}.")
.   if (!is_empty(my.dependency.comment))
.       heading3("$(my.dependency.comment)")
.   endif
.
.   if (is_empty(my.symbol))
PKG_CHECK_MODULES([$(my.cname)], [$(my.check)])
AC_SUBST([$(my.cname)_PKG], ['$(my.check)'])
AC_SUBST([$(my.cname)_CPPFLAGS], [${$(my.cname)_CFLAGS}])
AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])
AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}])
.   elsif (is_empty(my.dependency.extract))
AS_CASE([${$(my.symbol)}], [yes],
    [PKG_CHECK_MODULES([$(my.cname)], [$(my.check)])
     AC_SUBST([$(my.cname)_PKG], ['$(my.check)'])
     AC_SUBST([$(my.cname)_CPPFLAGS], [${$(my.cname)_CFLAGS}])
     AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])
     AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}])],
    [AC_SUBST([$(my.cname)_PKG], [])])
.   else
AS_CASE([${$(my.symbol)}], [yes],
    [PKG_CHECK_MODULES([$(my.cname)], [$(my.check)],
        [$(my.symbol)="`pkg-config --variable=$(my.dependency.extract) $(my.name)`"],
        [$(my.symbol)="$(my.default)"])
     AC_SUBST([$(my.cname)_PKG], ['$(my.check)'])
     AC_SUBST([$(my.cname)_CPPFLAGS], [${$(my.cname)_CFLAGS}])
     AC_MSG_NOTICE([$(my.cname)_CPPFLAGS : ${$(my.cname)_CPPFLAGS}])
     AC_MSG_NOTICE([$(my.cname)_LIBS : ${$(my.cname)_LIBS}])],
    [AC_SUBST([$(my.cname)_PKG], [])])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AX_CHECK_XXX_FLAG
.#-----------------------------------------------------------------------------
.macro render_flag(flag)
.   define my.flag = render_flag.flag
.   require(my.flag, "flag", "name")
.   require(my.flag, "flag", "comment")
.
.   define my.flags_variable = get_flags_variable(my.flag)
.   define my.flags_check = get_flags_check(my.flag)
.   define my.show_disabled = is_empty(my.flag.compiler) | (my.flag.compiler = "disabled")
.   define my.show_compiler = my.show_disabled ?? "" ? " Enabled in $(my.flag.compiler) only."
.   define my.compiler_pattern = is_empty(my.flag.compiler) ?? "*" ? "*$(my.flag.compiler)*"
.   heading2("$(my.flag.comment)$(my.show_compiler)")
.
.   if (!defined(my.flag.alternate))
AS_CASE([${CC}], [$(my.compiler_pattern)],
    [AX_CHECK_$(my.flags_check)_FLAG([-$(my.flag.name)],
        [$(my.flags_variable)="$$(my.flags_variable) -$(my.flag.name)"])])
.   endif
.
.   if (defined(my.flag.alternate))
AS_CASE([${CC}], [$(my.compiler_pattern)],
    [AX_CHECK_$(my.flags_check)_FLAG([-$(my.flag.name)],
        [$(my.flags_variable)="$$(my.flags_variable) -$(my.flag.name)"],
        [AX_CHECK_$(my.flags_check)_FLAG([-$(my.flag.alternate)],
            [$(my.flags_variable)="$$(my.flags_variable) -$(my.flag.alternate)"])])])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AC_SUBST
.#-----------------------------------------------------------------------------
.macro output_value(name, value)
.   if (defined(my.value))
.       heading2("Output ${$(my.name)}")
AC_SUBST([$(my.name)], [$(my.value)])
.   endif

.endmacro
.
.#-----------------------------------------------------------------------------
.# AC_OUTPUT
.#-----------------------------------------------------------------------------
.macro compile(files)
AC_CONFIG_FILES([$(my.files)])
AC_OUTPUT
.endmacro
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
function generate_configure(path_prefix)
for generate.repository by name as _repository

    require(_repository, "repository", "name")
    my.output_path = join(my.path_prefix, _repository.name)
    create_directory(my.output_path)
    define my.out_file = "$(my.output_path)/configure.ac"
    notify(my.out_file)
    output(my.out_file)

    copyleft(_repository.name)
    define my.configure = _repository->configure

    heading1("Standard declarations.")
    initialize_configure(_repository)
    require_stdcxx11(_repository)

    if (defined(my.configure->option))
        heading1("Process options.")
        for my.configure.option as _option
            render_option(_option)
        endfor
    endif

    if (defined(my.configure->define))
        heading1("Set preprocessor defines.")
        for my.configure.define as _define
            render_define_item(_define)
        endfor
    endif

    if (defined(my.configure->dependency))
        heading1("Check dependencies.")
        for my.configure.dependency as _dependency
            if (is_boost_dependency(_dependency))
                check_boost(_dependency)
            elsif (is_boost_lib_dependency(_dependency))
                check_boost_lib(_dependency, my.configure)
            elsif (is_java_dependency(_dependency))
                check_java(_dependency, my.configure)
            elsif (is_python_dependency(_dependency))
                check_python(_dependency, my.configure)
            elsif (is_package_dependency(_dependency))
                check_package(_dependency, my.configure)
            elsif (is_pthread_dependency(_dependency))
                check_pthread(_dependency, my.configure)
            elsif (is_iconv_dependency(_dependency))
                check_iconv(_dependency, my.configure)
            else
                check_dependency(_dependency)
            endif
        endfor
    endif

    if (defined(my.configure->flag))
        heading1("Set flags.")
        for my.configure.flag as _flag
            render_flag(_flag)
        endfor
    endif

    heading1("Process outputs into templates.")
    define my.packages = get_package_files(_repository)
    define my.templates = format_template_files(my.configure)
    compile("Makefile$(my.packages)$(my.templates)")

    close
endfor _repository
endfunction # generate_configure
###############################################################################
# NOTES on: -all-static
# Always choose static libraries where possible, and try to create a completely
#  statically linked executable.
# -static is interpreted by libtool, where it has a different meaning.
# In libtool-speak, it's -all-static.
# AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS="$LIBTOOL_APP_LDFLAGS -all-static"])
# AC_SUBST(LIBTOOL_APP_LDFLAGS)
###############################################################################
.endtemplate
.template 0
###############################################################################
# Execution
###############################################################################
[global].root = ".."
[global].trace = 0
[gsl].ignorecase = 0

# Note: expected context root libbitcoin-build directory
gsl from "library/math.gsl"
gsl from "library/string.gsl"
gsl from "library/collections.gsl"
gsl from "utilities.gsl"

generate_configure("output")

.endtemplate
