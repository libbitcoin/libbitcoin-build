.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin vcxproj.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

###
### vcxproj related string generators
###
function project_base(product, repository_name)
    define my.product = project_base.product
    require(my.product, "product", "prefix")

    if (is_library(my.product))
        return "$(my.repository_name)"
    elsif (is_program(my.product))
        if (defined(my.product.option))
            if (defined(my.product.msvc_name))
                return "$(my.product.msvc_name)"
            else
                return "$(my.repository_name)-$(my.product.option)"
            endif
        else
            require(my.product, "product", "option")
        endif
    else
        abort("Unrecognized product prefix: $(my.product.prefix)")
    endif
endfunction

function project_build_dir_relative_path(product, repository_name, vs_version)
    define my.product = project_build_dir_relative_path.product
    define my.proj_name = project_base(my.product, my.repository_name)
    define my.subpath = "builds/msvc/$(my.vs_version)"
    return append_path(\
        append_path(my.repository_name, my.subpath), my.proj_name)
endfunction

function project_file(product, repository_name, vs_version)
    define my.product = project_file.product
    define my.proj_relative_path = project_build_dir_relative_path(my.product,\
        my.repository_name, my.vs_version)
    define my.proj_name = project_base(my.product, my.repository_name)
    return append_path(my.proj_relative_path, "$(my.proj_name).vcxproj")
endfunction

function nuget_package_name(package)
    define my.package = nuget_package_name.package
    return "$(my.package.name).$(my.package.version)"
endfunction

function nuget_package_targets_path(package)
    define my.package = nuget_package_targets_path.package
    return "build/native/$(my.package.name).targets"
endfunction

###
### utilities
###
function append_prefix(base, subdir)
    if (!is_empty(my.base))
        return "$(my.base)_$(my.subdir)"
    endif
    return "$(my.subdir)"
endfunction

function nuget_entry(nuget_registry, name)
    define my.nuget_registry = nuget_entry.nuget_registry
    return my.nuget_registry->nuget(_nuget.build_name = my.name &\
        _nuget.compiler = platform_compiler(), _nuget)
endfunction

function repository_library_uuid(repository)
    define my.repository = repository_library_uuid.repository
    return my.repository->make->product(is_library(_product), _product).uuid
endfunction

function is_compiled_type(element)
    define my.element = is_compiled_type.element
    return matches_filetype(my.element.file_name, "cpp") |\
        matches_filetype(my.element.file_name, "c")
endfunction

function is_included_type(element)
    define my.element = is_included_type.element
    return matches_filetype(my.element.file_name, "hpp") |\
        matches_filetype(my.element.file_name, "h")
endfunction

function is_none_type(element)
    define my.element = is_none_type.element
    return matches_filetype(my.element.file_name, "ipp")
endfunction

function is_resources_type(element)
    define my.element = is_resources_type.element
    return matches_filetype(my.element.file_name, "rc")
endfunction

function object_base_from_element(element)
    define my.element = object_base_from_element.element
    if (matches_filetype(my.element.file_name, "cpp"))
        return global.left(my.element.file_name,\
            string.length(my.element.file_name) - 4)
    elsif (matches_filetype(my.element.file_name, "c"))
        return global.left(my.element.file_name,\
            string.length(my.element.file_name) - 2)
    endif

    return my.element.file_name
endfunction

function matches_filetype(file_name, extension)
    return (regexp.match("(^.)(.*)\\.$(my.extension)$", my.file_name) > 0)
endfunction

function is_option_console(product)
    define my.product = is_option_console.product
    return defined(my.product.option) & (my.product.option = "console")
endfunction

function is_option_tests(product)
    define my.product = is_option_tests.product
    return defined(my.product.option) & (my.product.option = "tests")
endfunction

###
### File element-related string data storage/query
###
function match_file_element_build_path(element, build_path)
    define my.element = match_file_element_build_path.element
    return defined(my.element) & (my.element.build_path = my.build_path)
endfunction

function match_file_element_path_prefix(element, path_prefix)
    define my.element = match_file_element_path_prefix.element
    return defined(my.element) &\
        ((!defined(my.element.path_prefix) & !defined(my.path_prefix)) |\
        (my.element.path_prefix = my.path_prefix))
endfunction

function match_file_element_file_name(element, file_name)
    define my.element = match_file_element_file_name.element
    return defined(my.element) & (my.element.file_name = my.file_name)
endfunction

function match_file_element(element, build_path, path_prefix, file_name)
    define my.element = match_file_element.element
    return defined(my.element) &\
        match_file_element_build_path(my.element, my.build_path) &\
        match_file_element_path_prefix(my.element, my.path_prefix) &\
        match_file_element_file_name(my.element, my.file_name)
endfunction

function exists_file_element(root, build_path, path_prefix, file_name)
    define my.root = exists_file_element.root
    return count(my.root.element, match_file_element(count, my.build_path,\
        my.path_prefix, my.file_name)) > 0
endfunction

function collides_file_element_file_name(root, file_name)
    define my.root = collides_file_element_file_name.root
    return count(my.root.element,\
        match_file_element_file_name(count, my.file_name)) > 1
endfunction

function add_file_element(root, build_path, path_prefix, file_name)
    define my.root = add_file_element.root
    if (defined(my.root) & !exists_file_element(my.root, my.build_path,\
        my.prefix_path, my.file_name))

        new my.root.element as _element
            _element.build_path = my.build_path
            if (!is_empty(my.path_prefix))
                _element.path_prefix = my.path_prefix
            endif
            _element.file_name = my.file_name
        endnew
    endif
    return my.root
endfunction

###
### File name collision-related data storage/query
###
function match_collision(collision, file_name)
    define my.collision = match_collision.collision
    return defined(my.collision) &\
        (my.collision.file_name = my.file_name)
endfunction

function exists_collision(root, file_name)
    define my.root = exists_collision.root
    return count(my.root.collision, match_collision(count, my.file_name)) > 0
endfunction

function add_collision(root, file_name)
    define my.root = add_collision.root
    if (defined(my.root) & !exists_collision(my.root, my.file_name))
        new my.root.collision as _collision
            _collision.file_name = my.file_name
        endnew
    endif
    return my.root
endfunction

###
### generic assistance functions
###
function discover_files(file_data, directory, win_path, prefix, recurse)
    define my.file_data = discover_files.file_data
    define my.directory = discover_files.directory

    for my.directory.file as _file by _file.name
        add_file_element(my.file_data, make_win_path(\
            append_path(my.win_path, _file.name)), my.prefix, _file.name)
    endfor

    if (is_true(my.recurse))
        for my.directory.directory as _directory by _directory.name
            define my.subdir_path = append_path(my.directory.path,\
                _directory.name)
            define my.subdir = open_directory(my.subdir_path)
            define my.subdir_win_path = append_path(my.win_path,\
                _directory.name)
            define my.subdir_prefix = append_prefix(my.prefix, _directory.name)

            discover_files(my.file_data, my.subdir, my.subdir_win_path,\
                my.subdir_prefix, my.recurse)
        endfor
    endif

endfunction

function populate_collisions(collisions, file_data)
    define my.collisions = populate_collisions.collisions
    define my.file_data = populate_collisions.file_data

    for my.file_data.element as _element
        if (collides_file_element_file_name(my.file_data, _element.file_name))
            add_collision(my.collisions, _element.file_name)
        endif
    endfor
endfunction

###
### functional artifact emission
###
function emit_item_group_compiler(repository, product, file_data, collisions)
    define my.repository = emit_item_group_compiler.repository
    define my.product = emit_item_group_compiler.product
    define my.file_data = emit_item_group_compiler.file_data
    define my.collisions = emit_item_group_compiler.collisions

    if ((my.repository.name = "libbitcoin") |\
        count(my.file_data.element, is_compiled_type(count)) > 0)

        emit_item_group_open()

        if (my.repository.name = "libbitcoin" & is_library(my.product))
            emit_compile_item_threadsafe_statistics()
        endif

        for my.file_data.element as _element by _element.build_path
            if (is_compiled_type(_element))
                emit_compile_item(my.collisions, _element)
            endif
        endfor

        emit_item_group_close()
    endif
endfunction

function emit_item_group_includes(file_data, collisions)
    define my.file_data = emit_item_group_includes.file_data
    define my.collisions = emit_item_group_includes.collisions

    if (count(my.file_data.element, is_included_type(count)) > 0)
        emit_item_group_open()

        for my.file_data.element as _element by _element.build_path
            if (is_included_type(_element))
                #echo("    $(_element.build_path)")
                emit_include_item(_element)
            endif
        endfor

        emit_item_group_close()
    endif
endfunction

function emit_item_group_none(file_data, collisions)
    define my.file_data = emit_item_group_none.file_data
    define my.collisions = emit_item_group_none.collisions

    emit_item_group_open()

    for my.file_data.element as _element by _element.build_path
        if (is_none_type(_element))
            #echo("    $(_element.build_path)")
            emit_none_item(_element)
        endif
    endfor

    new element as _element
        _element.build_path = "packages.config"
        emit_none_item(_element)
    endnew

    emit_item_group_close()
endfunction

function emit_item_group_resources(file_data, collisions)
    define my.file_data = emit_item_group_resources.file_data
    define my.collisions = emit_item_group_resources.collisions

    if (count(my.file_data.element, is_resources_type(count)) > 0)
        emit_item_group_open()

        for my.file_data.element as _element by _element.build_path
            if (is_resources_type(_element))
                #echo("    $(_element.build_path)")
                emit_resources_item(_element)
            endif
        endfor

        emit_item_group_close()
    endif
endfunction

function emit_item_group_product_configurations(product)
    define my.product = emit_item_group_product_configurations.product
    if (is_program(my.product))
        emit_item_group_product_configurations_binary()
    elsif (is_library(my.product))
        emit_item_group_product_configurations_library()
    else
        abort("Product type not recognized: $(my.product.prefix)")
    endif
endfunction

function emit_propery_group_configuration(product)
    define my.product = emit_propery_group_configuration.product
    if (is_library(my.product))
        emit_propery_group_configuration_library()
    endif
endfunction

function emit_import_group_extension_settings(nuget_registry, repository,\
    product)
    define my.nuget_registry = emit_import_group_extension_settings.nuget_registry
    define my.repository = emit_import_group_extension_settings.repository
    require(my.repository, "repository", "name")
    define my.product = emit_import_group_extension_settings.product
    require(my.product, "product", "path")
    require(my.product, "product", "prefix")
    require(my.product, "product", "uuid")

    emit_import_group_extension_settings_open()

    for my.repository->install.build as _build where defined(_build.nuget) &\
        (_build.nuget = "true")

        define entry = nuget_entry(my.nuget_registry, _build.name)
        for entry.package as _package
            require(_package, "package", "label")
            require(_package, "package", "name")
            require(_package, "package", "version")

            if (!(_package.label = "test") |\
                ((_package.label = "test") & is_true(my.product.test)))
                emit_import_project_nuget(_package)
            endif
        endfor
    endfor

    emit_import_group_extension_settings_close()
endfunction

function emit_target_ensure_nuget_imports(nuget_registry, repository,\
    product)
    define my.nuget_registry = emit_target_ensure_nuget_imports.nuget_registry
    define my.repository = emit_target_ensure_nuget_imports.repository
    require(my.repository, "repository", "name")
    define my.product = emit_target_ensure_nuget_imports.product
    require(my.product, "product", "path")
    require(my.product, "product", "prefix")
    require(my.product, "product", "uuid")

    emit_target_ensure_nuget_imports_open()

    for my.repository->install.build as _build where defined(_build.nuget) &\
        (_build.nuget = "true")

        define entry = nuget_entry(my.nuget_registry, _build.name)
        for entry.package as _package
            require(_package, "package", "label")
            require(_package, "package", "name")
            require(_package, "package", "version")

            if (!(_package.label = "test") |\
                ((_package.label = "test") & is_true(my.product.test)))
                emit_error_condition_nuget(_package)
            endif
        endfor
    endfor

    emit_target_ensure_nuget_imports_close()
endfunction

function emit_item_group_project_references(repository, product)
    define my.repository = emit_item_group_project_references.repository
    require(my.repository, "repository", "name")
    define my.product = emit_item_group_project_references.product
    require(my.product, "product", "path")
    require(my.product, "product", "prefix")
    require(my.product, "product", "uuid")

    if (!is_library(my.product))
        emit_item_group_open()
        emit_item_group_project_reference_item(my.repository.name,\
            repository_library_uuid(my.repository))
        emit_item_group_close()
    endif

endfunction

function emit_project(nuget_registry, repository, product, project_path)
    define my.nuget_registry = emit_project.nuget_registry
    define my.repository = emit_project.repository
    require(my.repository, "repository", "name")
    define my.product = emit_project.product
    require(my.product, "product", "path")
    require(my.product, "product", "prefix")
    require(my.product, "product", "uuid")
    define my.product_path = "$(my.project_path)/$(my.product.path)"
    define my.product_dir = open_directory(my.product_path)
    define my.product_offset = "../../../../$(my.product.path)"

    emit_xml_declaration()
    xml_copyleft(my.repository.name)
    emit_project_open(msbuild_version(my.product))

    emit_property_group_globals(my.product, my.repository.name)
    emit_item_group_product_configurations(my.product)
    emit_propery_group_configuration(my.product)
    emit_import_props()
    emit_import_property_sheets()

    # scan files (product, conditionally 'includes', build relative resources)
    new encountered_files as _files
        discover_files(_files, my.product_dir, my.product_offset,\
            my.product.path, "true")

        new collisions as _map
            populate_collisions(_map, _files)

            # TODO: consider providing this relationship in xml
            if (is_library(my.product))
                define my.include_path = "$(my.project_path)/include"
                define my.include_dir = open_directory(my.include_path)
                define my.headers_offset = "../../../../include"

                discover_files(_files, my.include_dir, my.headers_offset,\
                    "include", "true")
            endif


            if (is_library(my.product) |\
                (is_program(my.product) & !is_option_tests(my.product)))

                define my.resources_path = "$(my.project_path)/builds/msvc"
                define my.resources_dir = open_directory(my.resources_path)
                discover_files(_files, my.resources_dir, "../..",\
                    "build", "false")
            endif

            emit_item_group_compiler(my.repository, my.product, _files, _map)
            emit_item_group_includes(_files, _map)
            emit_item_group_none(_files, _map)
            emit_item_group_resources(_files, _map)
        endnew
    endnew

    emit_import_targets()
    emit_import_group_extension_targets()
    emit_import_group_extension_settings(my.nuget_registry, my.repository,\
        my.product)
    emit_target_ensure_nuget_imports(my.nuget_registry, my.repository,\
        my.product)
    emit_item_group_project_references(my.repository, my.product)

    emit_project_close()
endfunction emit_project

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro emit_xml_declaration()
<?xml version="1.0" encoding="utf-8"?>
.endmacro emit_xml_declaration
.
.macro emit_project_open(version)
<Project DefaultTargets="Build" ToolsVersion="$(my.version)" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
.endmacro emit_project_open
.
.macro emit_project_close()
</Project>
.endmacro emit_project_close
.
.macro emit_item_group_open()
  <ItemGroup>
.endmacro emit_item_group_open
.
.macro emit_item_group_close()
  </ItemGroup>
.endmacro emit_item_group_close
.
.macro emit_property_group_globals(product, repository_name)
.   define my.product = emit_property_group_globals.product
.   require(my.product, "product", "uuid")
  <PropertyGroup Label="Globals">
.   if (is_program(my.product))
    <ConfigurationType>Application</ConfigurationType>
.   endif
    <PlatformToolset>$(platform_toolset(my.product))</PlatformToolset>
    <ProjectGuid>{$(my.product.uuid:upper)}</ProjectGuid>
    <ProjectName>$(project_base(my.product, my.repository_name))</ProjectName>
  </PropertyGroup>
.endmacro emit_property_group_globals
.
.macro emit_item_group_product_configurations_library()
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugDLL|Win32">
      <Configuration>DebugDLL</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDLL|Win32">
      <Configuration>ReleaseDLL</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugDLL|x64">
      <Configuration>DebugDLL</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDLL|x64">
      <Configuration>ReleaseDLL</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLTCG|Win32">
      <Configuration>DebugLTCG</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLTCG|Win32">
      <Configuration>ReleaseLTCG</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLTCG|x64">
      <Configuration>DebugLTCG</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLTCG|x64">
      <Configuration>ReleaseLTCG</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLIB|Win32">
      <Configuration>DebugLIB</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLIB|Win32">
      <Configuration>ReleaseLIB</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLIB|x64">
      <Configuration>DebugLIB</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLIB|x64">
      <Configuration>ReleaseLIB</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
.endmacro emit_item_group_product_configurations_library
.
.macro emit_propery_group_configuration_library()
  <PropertyGroup Label="Configuration">
    <ConfigurationType Condition="\$(Configuration.IndexOf('DLL')) == -1">StaticLibrary</ConfigurationType>
    <ConfigurationType Condition="\$(Configuration.IndexOf('DLL')) != -1">DynamicLibrary</ConfigurationType>
  </PropertyGroup>
.endmacro emit_propery_group_configuration_library
.
.macro emit_item_group_product_configurations_binary()
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugDEXE|Win32">
      <Configuration>DebugDEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDEXE|Win32">
      <Configuration>ReleaseDEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugDEXE|x64">
      <Configuration>DebugDEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDEXE|x64">
      <Configuration>ReleaseDEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLEXE|Win32">
      <Configuration>DebugLEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLEXE|Win32">
      <Configuration>ReleaseLEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLEXE|x64">
      <Configuration>DebugLEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLEXE|x64">
      <Configuration>ReleaseLEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugSEXE|Win32">
      <Configuration>DebugSEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseSEXE|Win32">
      <Configuration>ReleaseSEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugSEXE|x64">
      <Configuration>DebugSEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseSEXE|x64">
      <Configuration>ReleaseSEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
.endmacro emit_item_group_product_configurations_binary
.
.macro emit_item_group_product_configurations_library()
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugDLL|Win32">
      <Configuration>DebugDLL</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDLL|Win32">
      <Configuration>ReleaseDLL</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugDLL|x64">
      <Configuration>DebugDLL</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDLL|x64">
      <Configuration>ReleaseDLL</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLTCG|Win32">
      <Configuration>DebugLTCG</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLTCG|Win32">
      <Configuration>ReleaseLTCG</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLTCG|x64">
      <Configuration>DebugLTCG</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLTCG|x64">
      <Configuration>ReleaseLTCG</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLIB|Win32">
      <Configuration>DebugLIB</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLIB|Win32">
      <Configuration>ReleaseLIB</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLIB|x64">
      <Configuration>DebugLIB</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLIB|x64">
      <Configuration>ReleaseLIB</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
.endmacro emit_item_group_product_configurations_library
.
.macro emit_import_props()
  <Import Project="\$(VCTargetsPath)\\Microsoft.Cpp.Default.props" />
  <Import Project="\$(VCTargetsPath)\\Microsoft.Cpp.props" />
.endmacro emit_import_props
.
.macro emit_import_targets()
  <Import Project="\$(VCTargetsPath)\\Microsoft.Cpp.targets" />
.endmacro emit_import_targets
.
.macro emit_import_property_sheets()
  <ImportGroup Label="PropertySheets">
    <Import Project="\$(ProjectDir)..\\..\\properties\\\$(Configuration).props" />
    <Import Project="\$(ProjectDir)..\\..\\properties\\Output.props" />
    <Import Project="\$(ProjectDir)\$(ProjectName).props" />
  </ImportGroup>
.endmacro emit_import_property_sheets
.
.macro emit_import_group_extension_targets()
  <ImportGroup Label="ExtensionTargets" />
.endmacro emit_import_group_extension_targets
.
.macro emit_import_group_extension_settings_open()
  <ImportGroup Label="ExtensionSettings">
.endmacro emit_import_group_extension_settings_open
.
.macro emit_import_group_extension_settings_close()
  </ImportGroup>
.endmacro emit_import_group_extension_settings_close
.
.macro emit_compile_item(collisions, file_record)
.   define my.collisions = emit_compile_item.collisions
.   define my.file_record = emit_compile_item.file_record
.
.   if (!exists_collision(my.collisions, my.file_record.file_name))
.       emit_item("ClCompile", my.file_record)
.   else
.       emit_item_with_object("ClCompile", my.file_record)
.   endif
.endmacro emit_compile_item
.
.macro emit_include_item(file_record)
.   define my.file_record = emit_include_item.file_record
.   emit_item("ClInclude", my.file_record)
.endmacro emit_include_item
.
.macro emit_none_item(file_record)
.   define my.file_record = emit_none_item.file_record
.   emit_item("None", my.file_record)
.endmacro emit_none_item
.
.macro emit_resources_item(file_record)
.   define my.file_record = emit_resources_item.file_record
.   emit_item("ResourceCompile", my.file_record)
.endmacro emit_none_item
.
.macro emit_item(type, file_record)
.   define my.file_record = emit_item.file_record
    <$(my.type) Include="$(make_win_path(my.file_record.build_path))" />
.endmacro emit_item
.
.macro emit_item_with_object(type, file_record)
.   define my.file_record = emit_item_with_object.file_record
.   define my.obj_base_name = object_base_from_element(my.file_record)
.   define my.obj_full_name = "$(my.file_record.path_prefix)_$(my.obj_base_name).obj"
    <$(my.type) Include="$(make_win_path(my.file_record.build_path))">
      <ObjectFileName>\$(IntDir)$(my.obj_full_name)</ObjectFileName>
    </$(my.type)>
.endmacro emit_item_with_object
.
.macro emit_import_project_nuget(package)
.   define my.package = emit_import_project_nuget.package
.   define my.prefix = "../../../../../../nuget"
.   define my.target = "$(my.prefix)/$(nuget_package_name(my.package))/$(nuget_package_targets_path(my.package))"
.   define my.win_path = make_win_path(my.target)
    <Import Project="$(my.win_path)" Condition="Exists('$(my.win_path)')" />
.endmacro emit_import_project_nuget
.
.macro emit_target_ensure_nuget_imports_open()
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
.endmacro emit_target_ensure_nuget_imports_open
.
.macro emit_target_ensure_nuget_imports_close()
  </Target>
.endmacro emit_target_ensure_nuget_imports_close
.
.macro emit_error_condition_nuget(package)
.   define my.package = emit_error_condition_nuget.package
.   define my.prefix = "../../../../../../nuget"
.   define my.target = "$(my.prefix)/$(nuget_package_name(my.package))/$(nuget_package_targets_path(my.package))"
.   define my.win_path = make_win_path(my.target)
    <Error Condition="!Exists('$(my.win_path)')" Text="\$([System.String]::Format('\$(ErrorText)', '$(my.win_path)'))" />
.endmacro emit_error_condition_nuget
.
.macro emit_item_group_project_reference_item(name, uuid)
    <ProjectReference Include="..\\$(my.name)\\$(my.name).vcxproj">
      <Project>{$(my.uuid:upper)}</Project>
    </ProjectReference>
.endmacro emit_item_group_project_reference_item
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
function generate_vcxproj(generate, vs_version)
    define my.generate = generate_vcxproj.generate
    for my.generate.repository as _repository by _repository.name\
        where defined(_repository->make)

        require(_repository, "repository", "name")
        define my.absolute_proj_path = append_path(global.root,\
            _repository.name)

        define my.nuget_registry = generate->nuget_registry

        for _repository->make.product as _product where \
            defined(_product.uuid) & !is_empty(_product.uuid) &\
            defined(_product.path)

            define my.proj_dir_name = project_build_dir_relative_path(\
                _product, _repository.name, my.vs_version)

            define my.proj_file = project_file(_product, _repository.name,\
                my.vs_version)

            create_directory(my.proj_dir_name)
            notify(my.proj_file)
            output(my.proj_file)

            emit_project(my.nuget_registry, _repository, _product,\
                my.absolute_proj_path)

            close
        endfor
    endfor _repository
endfunction # generate_vcxproj
.endtemplate
